
MUMT203_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a20  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004420  08004420  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004420  08004420  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004420  08004420  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004420  08004420  00014420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  08004434  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08004434  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f162  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd1  00000000  00000000  0002f19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00030f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  00031968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b019  00000000  00000000  00032270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac53  00000000  00000000  0005d289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e27b  00000000  00000000  00067edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  00176157  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002744  00000000  00000000  00176220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  00178964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003bc4 	.word	0x08003bc4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003bc4 	.word	0x08003bc4

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000206:	f000 fbae 	bl	8000966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020a:	f000 f8f3 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020e:	f000 fa1d 	bl	800064c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000212:	f000 f977 	bl	8000504 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000216:	f000 f9d9 	bl	80005cc <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800021a:	2100      	movs	r1, #0
 800021c:	4870      	ldr	r0, [pc, #448]	; (80003e0 <main+0x1e4>)
 800021e:	f001 fc26 	bl	8001a6e <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000222:	2110      	movs	r1, #16
 8000224:	486e      	ldr	r0, [pc, #440]	; (80003e0 <main+0x1e4>)
 8000226:	f001 fc22 	bl	8001a6e <HAL_DAC_Start>

	uint8_t buttonPressed = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000230:	f102 020f 	add.w	r2, r2, #15
 8000234:	7013      	strb	r3, [r2, #0]
	uint8_t isPlaying = 1;
 8000236:	2301      	movs	r3, #1
 8000238:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800023c:	f102 020e 	add.w	r2, r2, #14
 8000240:	7013      	strb	r3, [r2, #0]


	float sine[SIZE];


	for (int i=0; i<SIZE; i++)
 8000242:	2300      	movs	r3, #0
 8000244:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000248:	f102 0208 	add.w	r2, r2, #8
 800024c:	6013      	str	r3, [r2, #0]
 800024e:	e02d      	b.n	80002ac <main+0xb0>
	{
		sine[i] = HALF_VALUE * arm_sin_f32((float)i * (float)(2*PI/SIZE));
 8000250:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000254:	f103 0308 	add.w	r3, r3, #8
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	ee07 3a90 	vmov	s15, r3
 800025e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000262:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80003e4 <main+0x1e8>
 8000266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800026a:	eeb0 0a67 	vmov.f32	s0, s15
 800026e:	f003 fc37 	bl	8003ae0 <arm_sin_f32>
 8000272:	eef0 7a40 	vmov.f32	s15, s0
 8000276:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80003e8 <main+0x1ec>
 800027a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800027e:	f107 0310 	add.w	r3, r7, #16
 8000282:	3b10      	subs	r3, #16
 8000284:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000288:	f102 0208 	add.w	r2, r2, #8
 800028c:	6812      	ldr	r2, [r2, #0]
 800028e:	0092      	lsls	r2, r2, #2
 8000290:	4413      	add	r3, r2
 8000292:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<SIZE; i++)
 8000296:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800029a:	f103 0308 	add.w	r3, r3, #8
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80002a6:	f102 0208 	add.w	r2, r2, #8
 80002aa:	6013      	str	r3, [r2, #0]
 80002ac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80002b0:	f103 0308 	add.w	r3, r3, #8
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80002ba:	dbc9      	blt.n	8000250 <main+0x54>
	}

	float sin = 0;
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80002c4:	6013      	str	r3, [r2, #0]
	uint16_t j_sine = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80002cc:	f102 0206 	add.w	r2, r2, #6
 80002d0:	8013      	strh	r3, [r2, #0]
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(!HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin))
 80002d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d6:	4845      	ldr	r0, [pc, #276]	; (80003ec <main+0x1f0>)
 80002d8:	f001 ff30 	bl	800213c <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d136      	bne.n	8000350 <main+0x154>
		{
			if(!buttonPressed)
 80002e2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80002e6:	f103 030f 	add.w	r3, r3, #15
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d135      	bne.n	800035c <main+0x160>
			{
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80002f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002f4:	483e      	ldr	r0, [pc, #248]	; (80003f0 <main+0x1f4>)
 80002f6:	f001 ff51 	bl	800219c <HAL_GPIO_TogglePin>
				buttonPressed = 1;
 80002fa:	2301      	movs	r3, #1
 80002fc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000300:	f102 020f 	add.w	r2, r2, #15
 8000304:	7013      	strb	r3, [r2, #0]
				if (isPlaying == 1){
 8000306:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800030a:	f103 030e 	add.w	r3, r3, #14
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b01      	cmp	r3, #1
 8000312:	d10e      	bne.n	8000332 <main+0x136>
					HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 8000314:	2100      	movs	r1, #0
 8000316:	4832      	ldr	r0, [pc, #200]	; (80003e0 <main+0x1e4>)
 8000318:	f001 fbfb 	bl	8001b12 <HAL_DAC_Stop>
					HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
 800031c:	2110      	movs	r1, #16
 800031e:	4830      	ldr	r0, [pc, #192]	; (80003e0 <main+0x1e4>)
 8000320:	f001 fbf7 	bl	8001b12 <HAL_DAC_Stop>
					isPlaying = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800032a:	f102 020e 	add.w	r2, r2, #14
 800032e:	7013      	strb	r3, [r2, #0]
 8000330:	e014      	b.n	800035c <main+0x160>
				}
				else {
					HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000332:	2100      	movs	r1, #0
 8000334:	482a      	ldr	r0, [pc, #168]	; (80003e0 <main+0x1e4>)
 8000336:	f001 fb9a 	bl	8001a6e <HAL_DAC_Start>
					HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800033a:	2110      	movs	r1, #16
 800033c:	4828      	ldr	r0, [pc, #160]	; (80003e0 <main+0x1e4>)
 800033e:	f001 fb96 	bl	8001a6e <HAL_DAC_Start>
					isPlaying = 1;
 8000342:	2301      	movs	r3, #1
 8000344:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000348:	f102 020e 	add.w	r2, r2, #14
 800034c:	7013      	strb	r3, [r2, #0]
 800034e:	e005      	b.n	800035c <main+0x160>
				}
			}
		}
		else
		{
			buttonPressed = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000356:	f102 020f 	add.w	r2, r2, #15
 800035a:	7013      	strb	r3, [r2, #0]
		}

		if (isPlaying == 1)
 800035c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000360:	f103 030e 	add.w	r3, r3, #14
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2b01      	cmp	r3, #1
 8000368:	d1b3      	bne.n	80002d2 <main+0xd6>
		{
			sin = sine[j_sine];
 800036a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800036e:	f103 0306 	add.w	r3, r3, #6
 8000372:	881a      	ldrh	r2, [r3, #0]
 8000374:	f107 0310 	add.w	r3, r7, #16
 8000378:	3b10      	subs	r3, #16
 800037a:	0092      	lsls	r2, r2, #2
 800037c:	4413      	add	r3, r2
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000384:	6013      	str	r3, [r2, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sin);
 8000386:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800038a:	edd3 7a00 	vldr	s15, [r3]
 800038e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000392:	ee17 3a90 	vmov	r3, s15
 8000396:	2200      	movs	r2, #0
 8000398:	2100      	movs	r1, #0
 800039a:	4811      	ldr	r0, [pc, #68]	; (80003e0 <main+0x1e4>)
 800039c:	f001 fbd6 	bl	8001b4c <HAL_DAC_SetValue>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sin);
 80003a0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80003a4:	edd3 7a00 	vldr	s15, [r3]
 80003a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003ac:	ee17 3a90 	vmov	r3, s15
 80003b0:	2200      	movs	r2, #0
 80003b2:	2110      	movs	r1, #16
 80003b4:	480a      	ldr	r0, [pc, #40]	; (80003e0 <main+0x1e4>)
 80003b6:	f001 fbc9 	bl	8001b4c <HAL_DAC_SetValue>
			j_sine = (j_sine+1)%SIZE;
 80003ba:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80003be:	f103 0306 	add.w	r3, r3, #6
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	3301      	adds	r3, #1
 80003c6:	425a      	negs	r2, r3
 80003c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80003cc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80003d0:	bf58      	it	pl
 80003d2:	4253      	negpl	r3, r2
 80003d4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80003d8:	f102 0206 	add.w	r2, r2, #6
 80003dc:	8013      	strh	r3, [r2, #0]
		if(!HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin))
 80003de:	e778      	b.n	80002d2 <main+0xd6>
 80003e0:	20000028 	.word	0x20000028
 80003e4:	3bc90fdb 	.word	0x3bc90fdb
 80003e8:	44fff000 	.word	0x44fff000
 80003ec:	48000800 	.word	0x48000800
 80003f0:	48000400 	.word	0x48000400

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b0bc      	sub	sp, #240	; 0xf0
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80003fe:	2244      	movs	r2, #68	; 0x44
 8000400:	2100      	movs	r1, #0
 8000402:	4618      	mov	r0, r3
 8000404:	f003 fbd6 	bl	8003bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000408:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2294      	movs	r2, #148	; 0x94
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f003 fbc8 	bl	8003bb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000424:	2000      	movs	r0, #0
 8000426:	f001 fef3 	bl	8002210 <HAL_PWREx_ControlVoltageScaling>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000430:	f000 f968 	bl	8000704 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000434:	2310      	movs	r3, #16
 8000436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800043a:	2301      	movs	r3, #1
 800043c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000446:	2360      	movs	r3, #96	; 0x60
 8000448:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800044c:	2302      	movs	r3, #2
 800044e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000452:	2301      	movs	r3, #1
 8000454:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000458:	2301      	movs	r3, #1
 800045a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 800045e:	233c      	movs	r3, #60	; 0x3c
 8000460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000464:	2302      	movs	r3, #2
 8000466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800046a:	2302      	movs	r3, #2
 800046c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000470:	2302      	movs	r3, #2
 8000472:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000476:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800047a:	4618      	mov	r0, r3
 800047c:	f001 ff6c 	bl	8002358 <HAL_RCC_OscConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000486:	f000 f93d 	bl	8000704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048a:	230f      	movs	r3, #15
 800048c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000490:	2303      	movs	r3, #3
 8000492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80004ac:	2105      	movs	r1, #5
 80004ae:	4618      	mov	r0, r3
 80004b0:	f002 fb78 	bl	8002ba4 <HAL_RCC_ClockConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80004ba:	f000 f923 	bl	8000704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80004c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80004cc:	2301      	movs	r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80004d0:	2301      	movs	r3, #1
 80004d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 40;
 80004d4:	2328      	movs	r3, #40	; 0x28
 80004d6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80004d8:	2302      	movs	r3, #2
 80004da:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80004dc:	2302      	movs	r3, #2
 80004de:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80004e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80004e8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4618      	mov	r0, r3
 80004ee:	f002 fddf 	bl	80030b0 <HAL_RCCEx_PeriphCLKConfig>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x108>
  {
    Error_Handler();
 80004f8:	f000 f904 	bl	8000704 <Error_Handler>
  }
}
 80004fc:	bf00      	nop
 80004fe:	37f0      	adds	r7, #240	; 0xf0
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
 8000518:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800051a:	4b29      	ldr	r3, [pc, #164]	; (80005c0 <MX_ADC1_Init+0xbc>)
 800051c:	4a29      	ldr	r2, [pc, #164]	; (80005c4 <MX_ADC1_Init+0xc0>)
 800051e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000520:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <MX_ADC1_Init+0xbc>)
 8000522:	2200      	movs	r2, #0
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <MX_ADC1_Init+0xbc>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_ADC1_Init+0xbc>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000532:	4b23      	ldr	r3, [pc, #140]	; (80005c0 <MX_ADC1_Init+0xbc>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000538:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_ADC1_Init+0xbc>)
 800053a:	2204      	movs	r2, #4
 800053c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800053e:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <MX_ADC1_Init+0xbc>)
 8000540:	2200      	movs	r2, #0
 8000542:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_ADC1_Init+0xbc>)
 8000546:	2201      	movs	r2, #1
 8000548:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <MX_ADC1_Init+0xbc>)
 800054c:	2201      	movs	r2, #1
 800054e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_ADC1_Init+0xbc>)
 8000552:	2200      	movs	r2, #0
 8000554:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000558:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_ADC1_Init+0xbc>)
 800055a:	2200      	movs	r2, #0
 800055c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800055e:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_ADC1_Init+0xbc>)
 8000560:	2200      	movs	r2, #0
 8000562:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <MX_ADC1_Init+0xbc>)
 8000566:	2200      	movs	r2, #0
 8000568:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <MX_ADC1_Init+0xbc>)
 800056e:	2200      	movs	r2, #0
 8000570:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000572:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_ADC1_Init+0xbc>)
 8000574:	2200      	movs	r2, #0
 8000576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800057a:	4811      	ldr	r0, [pc, #68]	; (80005c0 <MX_ADC1_Init+0xbc>)
 800057c:	f000 fc2c 	bl	8000dd8 <HAL_ADC_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000586:	f000 f8bd 	bl	8000704 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_ADC1_Init+0xc4>)
 800058c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800058e:	2306      	movs	r3, #6
 8000590:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000596:	237f      	movs	r3, #127	; 0x7f
 8000598:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800059a:	2304      	movs	r3, #4
 800059c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	4619      	mov	r1, r3
 80005a6:	4806      	ldr	r0, [pc, #24]	; (80005c0 <MX_ADC1_Init+0xbc>)
 80005a8:	f000 fd60 	bl	800106c <HAL_ADC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b2:	f000 f8a7 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	2000003c 	.word	0x2000003c
 80005c4:	50040000 	.word	0x50040000
 80005c8:	80000001 	.word	0x80000001

080005cc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2228      	movs	r2, #40	; 0x28
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 faeb 	bl	8003bb4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <MX_DAC1_Init+0x78>)
 80005e0:	4a19      	ldr	r2, [pc, #100]	; (8000648 <MX_DAC1_Init+0x7c>)
 80005e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005e4:	4817      	ldr	r0, [pc, #92]	; (8000644 <MX_DAC1_Init+0x78>)
 80005e6:	f001 fa20 	bl	8001a2a <HAL_DAC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005f0:	f000 f888 	bl	8000704 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	4619      	mov	r1, r3
 8000612:	480c      	ldr	r0, [pc, #48]	; (8000644 <MX_DAC1_Init+0x78>)
 8000614:	f001 fac0 	bl	8001b98 <HAL_DAC_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800061e:	f000 f871 	bl	8000704 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	2210      	movs	r2, #16
 800062a:	4619      	mov	r1, r3
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_DAC1_Init+0x78>)
 800062e:	f001 fab3 	bl	8001b98 <HAL_DAC_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 8000638:	f000 f864 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	; 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000028 	.word	0x20000028
 8000648:	40007400 	.word	0x40007400

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	4b25      	ldr	r3, [pc, #148]	; (80006f8 <MX_GPIO_Init+0xac>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a24      	ldr	r2, [pc, #144]	; (80006f8 <MX_GPIO_Init+0xac>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <MX_GPIO_Init+0xac>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_GPIO_Init+0xac>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <MX_GPIO_Init+0xac>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_GPIO_Init+0xac>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_GPIO_Init+0xac>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_GPIO_Init+0xac>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_GPIO_Init+0xac>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b0:	4812      	ldr	r0, [pc, #72]	; (80006fc <MX_GPIO_Init+0xb0>)
 80006b2:	f001 fd5b 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_BLUE_Pin */
  GPIO_InitStruct.Pin = BUTTON_BLUE_Pin;
 80006b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_BLUE_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4619      	mov	r1, r3
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_GPIO_Init+0xb4>)
 80006cc:	f001 fba4 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	2301      	movs	r3, #1
 80006d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	4619      	mov	r1, r3
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_GPIO_Init+0xb0>)
 80006ea:	f001 fb95 	bl	8001e18 <HAL_GPIO_Init>

}
 80006ee:	bf00      	nop
 80006f0:	3720      	adds	r7, #32
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000
 80006fc:	48000400 	.word	0x48000400
 8000700:	48000800 	.word	0x48000800

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x44>)
 8000718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_MspInit+0x44>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6613      	str	r3, [r2, #96]	; 0x60
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x44>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x44>)
 8000730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <HAL_MspInit+0x44>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6593      	str	r3, [r2, #88]	; 0x58
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_MspInit+0x44>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a15      	ldr	r2, [pc, #84]	; (80007cc <HAL_ADC_MspInit+0x74>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d123      	bne.n	80007c2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_ADC_MspInit+0x78>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <HAL_ADC_MspInit+0x78>)
 8000780:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_ADC_MspInit+0x78>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_ADC_MspInit+0x78>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <HAL_ADC_MspInit+0x78>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <HAL_ADC_MspInit+0x78>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 80007aa:	2301      	movs	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007ae:	230b      	movs	r3, #11
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <HAL_ADC_MspInit+0x7c>)
 80007be:	f001 fb2b 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	; 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	50040000 	.word	0x50040000
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48000800 	.word	0x48000800

080007d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a15      	ldr	r2, [pc, #84]	; (800084c <HAL_DAC_MspInit+0x74>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d124      	bne.n	8000844 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_DAC_MspInit+0x78>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	4a14      	ldr	r2, [pc, #80]	; (8000850 <HAL_DAC_MspInit+0x78>)
 8000800:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_DAC_MspInit+0x78>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_DAC_MspInit+0x78>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_DAC_MspInit+0x78>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_DAC_MspInit+0x78>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800082a:	2330      	movs	r3, #48	; 0x30
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082e:	2303      	movs	r3, #3
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f001 faea 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000844:	bf00      	nop
 8000846:	3728      	adds	r7, #40	; 0x28
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40007400 	.word	0x40007400
 8000850:	40021000 	.word	0x40021000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f8b6 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <SystemInit+0x64>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a16      	ldr	r2, [pc, #88]	; (800090c <SystemInit+0x64>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <SystemInit+0x68>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a13      	ldr	r2, [pc, #76]	; (8000910 <SystemInit+0x68>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <SystemInit+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <SystemInit+0x68>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <SystemInit+0x68>)
 80008d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80008d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80008dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <SystemInit+0x68>)
 80008e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <SystemInit+0x68>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a09      	ldr	r2, [pc, #36]	; (8000910 <SystemInit+0x68>)
 80008ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <SystemInit+0x68>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <SystemInit+0x64>)
 80008fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00
 8000910:	40021000 	.word	0x40021000

08000914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800094c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000918:	f7ff ffc6 	bl	80008a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800091c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800091e:	e003      	b.n	8000928 <LoopCopyDataInit>

08000920 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000922:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000924:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000926:	3104      	adds	r1, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000928:	480a      	ldr	r0, [pc, #40]	; (8000954 <LoopForever+0xa>)
	ldr	r3, =_edata
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <LoopForever+0xe>)
	adds	r2, r0, r1
 800092c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800092e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000930:	d3f6      	bcc.n	8000920 <CopyDataInit>
	ldr	r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000934:	e002      	b.n	800093c <LoopFillZerobss>

08000936 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000936:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000938:	f842 3b04 	str.w	r3, [r2], #4

0800093c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <LoopForever+0x16>)
	cmp	r2, r3
 800093e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000940:	d3f9      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000942:	f003 f913 	bl	8003b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000946:	f7ff fc59 	bl	80001fc <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800094c:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000950:	08004428 	.word	0x08004428
	ldr	r0, =_sdata
 8000954:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000958:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800095c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000960:	200000a8 	.word	0x200000a8

08000964 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_IRQHandler>

08000966 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f001 f827 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000976:	2000      	movs	r0, #0
 8000978:	f000 f80e 	bl	8000998 <HAL_InitTick>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	e001      	b.n	800098c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000988:	f7ff fec2 	bl	8000710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800098c:	79fb      	ldrb	r3, [r7, #7]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d023      	beq.n	80009f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <HAL_InitTick+0x70>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_InitTick+0x6c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 f825 	bl	8001a12 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10f      	bne.n	80009ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d809      	bhi.n	80009e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009dc:	f000 fffd 	bl	80019da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_InitTick+0x74>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e007      	b.n	80009f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e004      	b.n	80009f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e001      	b.n	80009f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200000a4 	.word	0x200000a4

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200000a4 	.word	0x200000a4

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff ffee 	bl	8000a38 <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_Delay+0x44>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008

08000a98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
 8000b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3360      	adds	r3, #96	; 0x60
 8000b12:	461a      	mov	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <LL_ADC_SetOffset+0x44>)
 8000b22:	4013      	ands	r3, r2
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000b2a:	683a      	ldr	r2, [r7, #0]
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b38:	bf00      	nop
 8000b3a:	371c      	adds	r7, #28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	03fff000 	.word	0x03fff000

08000b48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3360      	adds	r3, #96	; 0x60
 8000b56:	461a      	mov	r2, r3
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3360      	adds	r3, #96	; 0x60
 8000b84:	461a      	mov	r2, r3
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000b9e:	bf00      	nop
 8000ba0:	371c      	adds	r7, #28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	615a      	str	r2, [r3, #20]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	3330      	adds	r3, #48	; 0x30
 8000be0:	461a      	mov	r2, r3
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	4413      	add	r3, r2
 8000bee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	f003 031f 	and.w	r3, r3, #31
 8000bfa:	211f      	movs	r1, #31
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	401a      	ands	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	0e9b      	lsrs	r3, r3, #26
 8000c08:	f003 011f 	and.w	r1, r3, #31
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	f003 031f 	and.w	r3, r3, #31
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	431a      	orrs	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000c1c:	bf00      	nop
 8000c1e:	371c      	adds	r7, #28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3314      	adds	r3, #20
 8000c38:	461a      	mov	r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	0e5b      	lsrs	r3, r3, #25
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	4413      	add	r3, r2
 8000c46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	0d1b      	lsrs	r3, r3, #20
 8000c50:	f003 031f 	and.w	r3, r3, #31
 8000c54:	2107      	movs	r1, #7
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	0d1b      	lsrs	r3, r3, #20
 8000c62:	f003 031f 	and.w	r3, r3, #31
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	431a      	orrs	r2, r3
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000c72:	bf00      	nop
 8000c74:	371c      	adds	r7, #28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0318 	and.w	r3, r3, #24
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000ca4:	40d9      	lsrs	r1, r3
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	400b      	ands	r3, r1
 8000caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	0007ffff 	.word	0x0007ffff

08000cc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000cd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	6093      	str	r3, [r2, #8]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d00:	d101      	bne.n	8000d06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000d50:	d101      	bne.n	8000d56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d101      	bne.n	8000d7c <LL_ADC_IsEnabled+0x18>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <LL_ADC_IsEnabled+0x1a>
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	d101      	bne.n	8000da2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f003 0308 	and.w	r3, r3, #8
 8000dc0:	2b08      	cmp	r3, #8
 8000dc2:	d101      	bne.n	8000dc8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e12d      	b.n	800104e <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d109      	bne.n	8000e14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fca9 	bl	8000758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff67 	bl	8000cec <LL_ADC_IsDeepPowerDownEnabled>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d004      	beq.n	8000e2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff4d 	bl	8000cc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff82 	bl	8000d3c <LL_ADC_IsInternalRegulatorEnabled>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d113      	bne.n	8000e66 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff66 	bl	8000d14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000e48:	4b83      	ldr	r3, [pc, #524]	; (8001058 <HAL_ADC_Init+0x280>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	099b      	lsrs	r3, r3, #6
 8000e4e:	4a83      	ldr	r2, [pc, #524]	; (800105c <HAL_ADC_Init+0x284>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	099b      	lsrs	r3, r3, #6
 8000e56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e58:	e002      	b.n	8000e60 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f9      	bne.n	8000e5a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff66 	bl	8000d3c <LL_ADC_IsInternalRegulatorEnabled>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10d      	bne.n	8000e92 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	f043 0210 	orr.w	r2, r3, #16
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e86:	f043 0201 	orr.w	r2, r3, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ff77 	bl	8000d8a <LL_ADC_REG_IsConversionOngoing>
 8000e9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 80c8 	bne.w	800103c <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 80c4 	bne.w	800103c <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ebc:	f043 0202 	orr.w	r2, r3, #2
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff4b 	bl	8000d64 <LL_ADC_IsEnabled>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10b      	bne.n	8000eec <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000ed4:	4862      	ldr	r0, [pc, #392]	; (8001060 <HAL_ADC_Init+0x288>)
 8000ed6:	f7ff ff45 	bl	8000d64 <LL_ADC_IsEnabled>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d105      	bne.n	8000eec <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	485f      	ldr	r0, [pc, #380]	; (8001064 <HAL_ADC_Init+0x28c>)
 8000ee8:	f7ff fdd6 	bl	8000a98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	7e5b      	ldrb	r3, [r3, #25]
 8000ef0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ef6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8000efc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8000f02:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f0a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d106      	bne.n	8000f28 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	045b      	lsls	r3, r3, #17
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d009      	beq.n	8000f44 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	4b47      	ldr	r3, [pc, #284]	; (8001068 <HAL_ADC_Init+0x290>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	430b      	orrs	r3, r1
 8000f56:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff14 	bl	8000d8a <LL_ADC_REG_IsConversionOngoing>
 8000f62:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff21 	bl	8000db0 <LL_ADC_INJ_IsConversionOngoing>
 8000f6e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d140      	bne.n	8000ff8 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d13d      	bne.n	8000ff8 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	7e1b      	ldrb	r3, [r3, #24]
 8000f84:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f86:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f8e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f9e:	f023 0306 	bic.w	r3, r3, #6
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6812      	ldr	r2, [r2, #0]
 8000fa6:	69b9      	ldr	r1, [r7, #24]
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d118      	bne.n	8000fe8 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000fc0:	f023 0304 	bic.w	r3, r3, #4
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000fcc:	4311      	orrs	r1, r2
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000fd2:	4311      	orrs	r1, r2
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0201 	orr.w	r2, r2, #1
 8000fe4:	611a      	str	r2, [r3, #16]
 8000fe6:	e007      	b.n	8000ff8 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0201 	bic.w	r2, r2, #1
 8000ff6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d10c      	bne.n	800101a <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f023 010f 	bic.w	r1, r3, #15
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	1e5a      	subs	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	631a      	str	r2, [r3, #48]	; 0x30
 8001018:	e007      	b.n	800102a <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 020f 	bic.w	r2, r2, #15
 8001028:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	f023 0303 	bic.w	r3, r3, #3
 8001032:	f043 0201 	orr.w	r2, r3, #1
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	659a      	str	r2, [r3, #88]	; 0x58
 800103a:	e007      	b.n	800104c <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001040:	f043 0210 	orr.w	r2, r3, #16
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800104c:	7ffb      	ldrb	r3, [r7, #31]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3720      	adds	r7, #32
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000
 800105c:	053e2d63 	.word	0x053e2d63
 8001060:	50040000 	.word	0x50040000
 8001064:	50040300 	.word	0x50040300
 8001068:	fff0c007 	.word	0xfff0c007

0800106c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0b6      	sub	sp, #216	; 0xd8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001086:	2b01      	cmp	r3, #1
 8001088:	d101      	bne.n	800108e <HAL_ADC_ConfigChannel+0x22>
 800108a:	2302      	movs	r3, #2
 800108c:	e3d4      	b.n	8001838 <HAL_ADC_ConfigChannel+0x7cc>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fe75 	bl	8000d8a <LL_ADC_REG_IsConversionOngoing>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	f040 83b9 	bne.w	800181a <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d824      	bhi.n	80010fa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	3b02      	subs	r3, #2
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d81b      	bhi.n	80010f2 <HAL_ADC_ConfigChannel+0x86>
 80010ba:	a201      	add	r2, pc, #4	; (adr r2, 80010c0 <HAL_ADC_ConfigChannel+0x54>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	080010d1 	.word	0x080010d1
 80010c4:	080010d9 	.word	0x080010d9
 80010c8:	080010e1 	.word	0x080010e1
 80010cc:	080010e9 	.word	0x080010e9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	220c      	movs	r2, #12
 80010d4:	605a      	str	r2, [r3, #4]
          break;
 80010d6:	e011      	b.n	80010fc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2212      	movs	r2, #18
 80010dc:	605a      	str	r2, [r3, #4]
          break;
 80010de:	e00d      	b.n	80010fc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	2218      	movs	r2, #24
 80010e4:	605a      	str	r2, [r3, #4]
          break;
 80010e6:	e009      	b.n	80010fc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ee:	605a      	str	r2, [r3, #4]
          break;
 80010f0:	e004      	b.n	80010fc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2206      	movs	r2, #6
 80010f6:	605a      	str	r2, [r3, #4]
          break;
 80010f8:	e000      	b.n	80010fc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80010fa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	6859      	ldr	r1, [r3, #4]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	f7ff fd61 	bl	8000bd0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fe39 	bl	8000d8a <LL_ADC_REG_IsConversionOngoing>
 8001118:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fe45 	bl	8000db0 <LL_ADC_INJ_IsConversionOngoing>
 8001126:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800112a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800112e:	2b00      	cmp	r3, #0
 8001130:	f040 81c1 	bne.w	80014b6 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001134:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001138:	2b00      	cmp	r3, #0
 800113a:	f040 81bc 	bne.w	80014b6 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001146:	d10f      	bne.n	8001168 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fd68 	bl	8000c28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fd22 	bl	8000baa <LL_ADC_SetSamplingTimeCommonConfig>
 8001166:	e00e      	b.n	8001186 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	6819      	ldr	r1, [r3, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	461a      	mov	r2, r3
 8001176:	f7ff fd57 	bl	8000c28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fd12 	bl	8000baa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	695a      	ldr	r2, [r3, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	08db      	lsrs	r3, r3, #3
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d00a      	beq.n	80011be <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	6919      	ldr	r1, [r3, #16]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80011b8:	f7ff fca2 	bl	8000b00 <LL_ADC_SetOffset>
 80011bc:	e17b      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fcbf 	bl	8000b48 <LL_ADC_GetOffsetChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10a      	bne.n	80011ea <HAL_ADC_ConfigChannel+0x17e>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fcb4 	bl	8000b48 <LL_ADC_GetOffsetChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	0e9b      	lsrs	r3, r3, #26
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	e01e      	b.n	8001228 <HAL_ADC_ConfigChannel+0x1bc>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fca9 	bl	8000b48 <LL_ADC_GetOffsetChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001208:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800120c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001218:	2320      	movs	r3, #32
 800121a:	e004      	b.n	8001226 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800121c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001220:	fab3 f383 	clz	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001230:	2b00      	cmp	r3, #0
 8001232:	d105      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1d4>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0e9b      	lsrs	r3, r3, #26
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	e018      	b.n	8001272 <HAL_ADC_ConfigChannel+0x206>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800124c:	fa93 f3a3 	rbit	r3, r3
 8001250:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800125c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001264:	2320      	movs	r3, #32
 8001266:	e004      	b.n	8001272 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001268:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800126c:	fab3 f383 	clz	r3, r3
 8001270:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001272:	429a      	cmp	r2, r3
 8001274:	d106      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fc78 	bl	8000b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fc5c 	bl	8000b48 <LL_ADC_GetOffsetChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10a      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x244>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2101      	movs	r1, #1
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fc51 	bl	8000b48 <LL_ADC_GetOffsetChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	0e9b      	lsrs	r3, r3, #26
 80012aa:	f003 021f 	and.w	r2, r3, #31
 80012ae:	e01e      	b.n	80012ee <HAL_ADC_ConfigChannel+0x282>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2101      	movs	r1, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fc46 	bl	8000b48 <LL_ADC_GetOffsetChannel>
 80012bc:	4603      	mov	r3, r0
 80012be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80012ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80012d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80012d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80012de:	2320      	movs	r3, #32
 80012e0:	e004      	b.n	80012ec <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80012e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012e6:	fab3 f383 	clz	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d105      	bne.n	8001306 <HAL_ADC_ConfigChannel+0x29a>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0e9b      	lsrs	r3, r3, #26
 8001300:	f003 031f 	and.w	r3, r3, #31
 8001304:	e018      	b.n	8001338 <HAL_ADC_ConfigChannel+0x2cc>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800131a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800131e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001322:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800132a:	2320      	movs	r3, #32
 800132c:	e004      	b.n	8001338 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800132e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001332:	fab3 f383 	clz	r3, r3
 8001336:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001338:	429a      	cmp	r2, r3
 800133a:	d106      	bne.n	800134a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2200      	movs	r2, #0
 8001342:	2101      	movs	r1, #1
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fc15 	bl	8000b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2102      	movs	r1, #2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fbf9 	bl	8000b48 <LL_ADC_GetOffsetChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10a      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x30a>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2102      	movs	r1, #2
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fbee 	bl	8000b48 <LL_ADC_GetOffsetChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	0e9b      	lsrs	r3, r3, #26
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	e01e      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x348>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2102      	movs	r1, #2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fbe3 	bl	8000b48 <LL_ADC_GetOffsetChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001398:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800139c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80013a4:	2320      	movs	r3, #32
 80013a6:	e004      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80013a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013ac:	fab3 f383 	clz	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x360>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0e9b      	lsrs	r3, r3, #26
 80013c6:	f003 031f 	and.w	r3, r3, #31
 80013ca:	e016      	b.n	80013fa <HAL_ADC_ConfigChannel+0x38e>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013d8:	fa93 f3a3 	rbit	r3, r3
 80013dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80013de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80013e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80013ec:	2320      	movs	r3, #32
 80013ee:	e004      	b.n	80013fa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80013f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80013f4:	fab3 f383 	clz	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d106      	bne.n	800140c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	2102      	movs	r1, #2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fbb4 	bl	8000b74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2103      	movs	r1, #3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fb98 	bl	8000b48 <LL_ADC_GetOffsetChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10a      	bne.n	8001438 <HAL_ADC_ConfigChannel+0x3cc>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2103      	movs	r1, #3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fb8d 	bl	8000b48 <LL_ADC_GetOffsetChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	0e9b      	lsrs	r3, r3, #26
 8001432:	f003 021f 	and.w	r2, r3, #31
 8001436:	e017      	b.n	8001468 <HAL_ADC_ConfigChannel+0x3fc>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2103      	movs	r1, #3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fb82 	bl	8000b48 <LL_ADC_GetOffsetChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001450:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001452:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001454:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800145a:	2320      	movs	r3, #32
 800145c:	e003      	b.n	8001466 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800145e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001470:	2b00      	cmp	r3, #0
 8001472:	d105      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x414>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	0e9b      	lsrs	r3, r3, #26
 800147a:	f003 031f 	and.w	r3, r3, #31
 800147e:	e011      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x438>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800148e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001490:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001498:	2320      	movs	r3, #32
 800149a:	e003      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800149c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d106      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2200      	movs	r2, #0
 80014ae:	2103      	movs	r1, #3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fb5f 	bl	8000b74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fc52 	bl	8000d64 <LL_ADC_IsEnabled>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f040 8140 	bne.w	8001748 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6819      	ldr	r1, [r3, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	461a      	mov	r2, r3
 80014d6:	f7ff fbd3 	bl	8000c80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	4a8f      	ldr	r2, [pc, #572]	; (800171c <HAL_ADC_ConfigChannel+0x6b0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	f040 8131 	bne.w	8001748 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10b      	bne.n	800150e <HAL_ADC_ConfigChannel+0x4a2>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	0e9b      	lsrs	r3, r3, #26
 80014fc:	3301      	adds	r3, #1
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	2b09      	cmp	r3, #9
 8001504:	bf94      	ite	ls
 8001506:	2301      	movls	r3, #1
 8001508:	2300      	movhi	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	e019      	b.n	8001542 <HAL_ADC_ConfigChannel+0x4d6>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800151c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800151e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001526:	2320      	movs	r3, #32
 8001528:	e003      	b.n	8001532 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800152a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	2b09      	cmp	r3, #9
 800153a:	bf94      	ite	ls
 800153c:	2301      	movls	r3, #1
 800153e:	2300      	movhi	r3, #0
 8001540:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001542:	2b00      	cmp	r3, #0
 8001544:	d079      	beq.n	800163a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154e:	2b00      	cmp	r3, #0
 8001550:	d107      	bne.n	8001562 <HAL_ADC_ConfigChannel+0x4f6>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0e9b      	lsrs	r3, r3, #26
 8001558:	3301      	adds	r3, #1
 800155a:	069b      	lsls	r3, r3, #26
 800155c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001560:	e015      	b.n	800158e <HAL_ADC_ConfigChannel+0x522>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001572:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800157a:	2320      	movs	r3, #32
 800157c:	e003      	b.n	8001586 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800157e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3301      	adds	r3, #1
 8001588:	069b      	lsls	r3, r3, #26
 800158a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x542>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0e9b      	lsrs	r3, r3, #26
 80015a0:	3301      	adds	r3, #1
 80015a2:	f003 031f 	and.w	r3, r3, #31
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	e017      	b.n	80015de <HAL_ADC_ConfigChannel+0x572>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b6:	fa93 f3a3 	rbit	r3, r3
 80015ba:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80015bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015be:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80015c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80015c6:	2320      	movs	r3, #32
 80015c8:	e003      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80015ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	f003 031f 	and.w	r3, r3, #31
 80015d8:	2101      	movs	r1, #1
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	ea42 0103 	orr.w	r1, r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10a      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x598>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	0e9b      	lsrs	r3, r3, #26
 80015f4:	3301      	adds	r3, #1
 80015f6:	f003 021f 	and.w	r2, r3, #31
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	051b      	lsls	r3, r3, #20
 8001602:	e018      	b.n	8001636 <HAL_ADC_ConfigChannel+0x5ca>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800161c:	2320      	movs	r3, #32
 800161e:	e003      	b.n	8001628 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001622:	fab3 f383 	clz	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	3301      	adds	r3, #1
 800162a:	f003 021f 	and.w	r2, r3, #31
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001636:	430b      	orrs	r3, r1
 8001638:	e081      	b.n	800173e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001642:	2b00      	cmp	r3, #0
 8001644:	d107      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x5ea>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0e9b      	lsrs	r3, r3, #26
 800164c:	3301      	adds	r3, #1
 800164e:	069b      	lsls	r3, r3, #26
 8001650:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001654:	e015      	b.n	8001682 <HAL_ADC_ConfigChannel+0x616>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800166e:	2320      	movs	r3, #32
 8001670:	e003      	b.n	800167a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	3301      	adds	r3, #1
 800167c:	069b      	lsls	r3, r3, #26
 800167e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <HAL_ADC_ConfigChannel+0x636>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	0e9b      	lsrs	r3, r3, #26
 8001694:	3301      	adds	r3, #1
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	e017      	b.n	80016d2 <HAL_ADC_ConfigChannel+0x666>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	fa93 f3a3 	rbit	r3, r3
 80016ae:	61fb      	str	r3, [r7, #28]
  return result;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80016ba:	2320      	movs	r3, #32
 80016bc:	e003      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	3301      	adds	r3, #1
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	ea42 0103 	orr.w	r1, r2, r3
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10d      	bne.n	80016fe <HAL_ADC_ConfigChannel+0x692>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	0e9b      	lsrs	r3, r3, #26
 80016e8:	3301      	adds	r3, #1
 80016ea:	f003 021f 	and.w	r2, r3, #31
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	3b1e      	subs	r3, #30
 80016f6:	051b      	lsls	r3, r3, #20
 80016f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016fc:	e01e      	b.n	800173c <HAL_ADC_ConfigChannel+0x6d0>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	613b      	str	r3, [r7, #16]
  return result;
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d104      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001716:	2320      	movs	r3, #32
 8001718:	e006      	b.n	8001728 <HAL_ADC_ConfigChannel+0x6bc>
 800171a:	bf00      	nop
 800171c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fab3 f383 	clz	r3, r3
 8001726:	b2db      	uxtb	r3, r3
 8001728:	3301      	adds	r3, #1
 800172a:	f003 021f 	and.w	r2, r3, #31
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	3b1e      	subs	r3, #30
 8001736:	051b      	lsls	r3, r3, #20
 8001738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800173c:	430b      	orrs	r3, r1
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	6892      	ldr	r2, [r2, #8]
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa70 	bl	8000c28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <HAL_ADC_ConfigChannel+0x7d4>)
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d06b      	beq.n	800182c <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001754:	483b      	ldr	r0, [pc, #236]	; (8001844 <HAL_ADC_ConfigChannel+0x7d8>)
 8001756:	f7ff f9c5 	bl	8000ae4 <LL_ADC_GetCommonPathInternalCh>
 800175a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a39      	ldr	r2, [pc, #228]	; (8001848 <HAL_ADC_ConfigChannel+0x7dc>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d126      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800176c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d120      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a34      	ldr	r2, [pc, #208]	; (800184c <HAL_ADC_ConfigChannel+0x7e0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d156      	bne.n	800182c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800177e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001782:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001786:	4619      	mov	r1, r3
 8001788:	482e      	ldr	r0, [pc, #184]	; (8001844 <HAL_ADC_ConfigChannel+0x7d8>)
 800178a:	f7ff f998 	bl	8000abe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800178e:	4b30      	ldr	r3, [pc, #192]	; (8001850 <HAL_ADC_ConfigChannel+0x7e4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	099b      	lsrs	r3, r3, #6
 8001794:	4a2f      	ldr	r2, [pc, #188]	; (8001854 <HAL_ADC_ConfigChannel+0x7e8>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	099a      	lsrs	r2, r3, #6
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017a6:	e002      	b.n	80017ae <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f9      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017b4:	e03a      	b.n	800182c <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a27      	ldr	r2, [pc, #156]	; (8001858 <HAL_ADC_ConfigChannel+0x7ec>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d113      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x77c>
 80017c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10d      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a1e      	ldr	r2, [pc, #120]	; (800184c <HAL_ADC_ConfigChannel+0x7e0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d12a      	bne.n	800182c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017de:	4619      	mov	r1, r3
 80017e0:	4818      	ldr	r0, [pc, #96]	; (8001844 <HAL_ADC_ConfigChannel+0x7d8>)
 80017e2:	f7ff f96c 	bl	8000abe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80017e6:	e021      	b.n	800182c <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a1b      	ldr	r2, [pc, #108]	; (800185c <HAL_ADC_ConfigChannel+0x7f0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d11c      	bne.n	800182c <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80017f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d116      	bne.n	800182c <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <HAL_ADC_ConfigChannel+0x7e0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d111      	bne.n	800182c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800180c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001810:	4619      	mov	r1, r3
 8001812:	480c      	ldr	r0, [pc, #48]	; (8001844 <HAL_ADC_ConfigChannel+0x7d8>)
 8001814:	f7ff f953 	bl	8000abe <LL_ADC_SetCommonPathInternalCh>
 8001818:	e008      	b.n	800182c <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f043 0220 	orr.w	r2, r3, #32
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001834:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001838:	4618      	mov	r0, r3
 800183a:	37d8      	adds	r7, #216	; 0xd8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	80080000 	.word	0x80080000
 8001844:	50040300 	.word	0x50040300
 8001848:	c7520000 	.word	0xc7520000
 800184c:	50040000 	.word	0x50040000
 8001850:	20000000 	.word	0x20000000
 8001854:	053e2d63 	.word	0x053e2d63
 8001858:	cb840000 	.word	0xcb840000
 800185c:	80000001 	.word	0x80000001

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db0a      	blt.n	80018ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	490c      	ldr	r1, [pc, #48]	; (8001910 <__NVIC_SetPriority+0x4c>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	0112      	lsls	r2, r2, #4
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	440b      	add	r3, r1
 80018e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ec:	e00a      	b.n	8001904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <__NVIC_SetPriority+0x50>)
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	3b04      	subs	r3, #4
 80018fc:	0112      	lsls	r2, r2, #4
 80018fe:	b2d2      	uxtb	r2, r2
 8001900:	440b      	add	r3, r1
 8001902:	761a      	strb	r2, [r3, #24]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000e100 	.word	0xe000e100
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f1c3 0307 	rsb	r3, r3, #7
 8001932:	2b04      	cmp	r3, #4
 8001934:	bf28      	it	cs
 8001936:	2304      	movcs	r3, #4
 8001938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3304      	adds	r3, #4
 800193e:	2b06      	cmp	r3, #6
 8001940:	d902      	bls.n	8001948 <NVIC_EncodePriority+0x30>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	3b03      	subs	r3, #3
 8001946:	e000      	b.n	800194a <NVIC_EncodePriority+0x32>
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	401a      	ands	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001960:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43d9      	mvns	r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	4313      	orrs	r3, r2
         );
}
 8001972:	4618      	mov	r0, r3
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a4:	f7ff ff8e 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff47 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff5c 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff8e 	bl	8001918 <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffb0 	bl	8001980 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e014      	b.n	8001a66 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	791b      	ldrb	r3, [r3, #4]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d105      	bne.n	8001a52 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7fe fec3 	bl	80007d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2202      	movs	r2, #2
 8001a56:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	795b      	ldrb	r3, [r3, #5]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_DAC_Start+0x16>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e040      	b.n	8001b06 <HAL_DAC_Start+0x98>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6819      	ldr	r1, [r3, #0]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d11d      	bne.n	8001af8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	e014      	b.n	8001af8 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2102      	movs	r1, #2
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d107      	bne.n	8001af8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0202 	orr.w	r2, r2, #2
 8001af6:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6819      	ldr	r1, [r3, #0]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2201      	movs	r2, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	400a      	ands	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d105      	bne.n	8001b76 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	3308      	adds	r3, #8
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e004      	b.n	8001b80 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3314      	adds	r3, #20
 8001b7e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	461a      	mov	r2, r3
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	795b      	ldrb	r3, [r3, #5]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_DAC_ConfigChannel+0x1c>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e12a      	b.n	8001e0a <HAL_DAC_ConfigChannel+0x272>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d174      	bne.n	8001cb2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001bc8:	f7fe ff36 	bl	8000a38 <HAL_GetTick>
 8001bcc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d134      	bne.n	8001c3e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001bd4:	e011      	b.n	8001bfa <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001bd6:	f7fe ff2f 	bl	8000a38 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d90a      	bls.n	8001bfa <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f043 0208 	orr.w	r2, r3, #8
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e107      	b.n	8001e0a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1e6      	bne.n	8001bd6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f7fe ff21 	bl	8000a50 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	69d2      	ldr	r2, [r2, #28]
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
 8001c18:	e01e      	b.n	8001c58 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c1a:	f7fe ff0d 	bl	8000a38 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d90a      	bls.n	8001c3e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	f043 0208 	orr.w	r2, r3, #8
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2203      	movs	r2, #3
 8001c38:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e0e5      	b.n	8001e0a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	dbe8      	blt.n	8001c1a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f7fe ff01 	bl	8000a50 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	69d2      	ldr	r2, [r2, #28]
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	ea02 0103 	and.w	r1, r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	6a1a      	ldr	r2, [r3, #32]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	21ff      	movs	r1, #255	; 0xff
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	ea02 0103 	and.w	r1, r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d11d      	bne.n	8001cf6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc0:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	221f      	movs	r2, #31
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2207      	movs	r2, #7
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	400a      	ands	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d9a:	d104      	bne.n	8001da6 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	e018      	b.n	8001dd8 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d104      	bne.n	8001db8 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e00f      	b.n	8001dd8 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001db8:	f001 f8ac 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8001dbc:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_DAC_ConfigChannel+0x27c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d904      	bls.n	8001dd0 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e003      	b.n	8001dd8 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001dd6:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6819      	ldr	r1, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	22c0      	movs	r2, #192	; 0xc0
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	400a      	ands	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3720      	adds	r7, #32
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	04c4b400 	.word	0x04c4b400

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e26:	e166      	b.n	80020f6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	4013      	ands	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8158 	beq.w	80020f0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d00b      	beq.n	8001e60 <HAL_GPIO_Init+0x48>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d007      	beq.n	8001e60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e54:	2b11      	cmp	r3, #17
 8001e56:	d003      	beq.n	8001e60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b12      	cmp	r3, #18
 8001e5e:	d130      	bne.n	8001ec2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e96:	2201      	movs	r2, #1
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	f003 0201 	and.w	r2, r3, #1
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0xea>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b12      	cmp	r3, #18
 8001f00:	d123      	bne.n	8001f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	220f      	movs	r2, #15
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4013      	ands	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	6939      	ldr	r1, [r7, #16]
 8001f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	2203      	movs	r2, #3
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0203 	and.w	r2, r3, #3
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 80b2 	beq.w	80020f0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8c:	4b61      	ldr	r3, [pc, #388]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 8001f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f90:	4a60      	ldr	r2, [pc, #384]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6613      	str	r3, [r2, #96]	; 0x60
 8001f98:	4b5e      	ldr	r3, [pc, #376]	; (8002114 <HAL_GPIO_Init+0x2fc>)
 8001f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fa4:	4a5c      	ldr	r2, [pc, #368]	; (8002118 <HAL_GPIO_Init+0x300>)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3302      	adds	r3, #2
 8001fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fce:	d02b      	beq.n	8002028 <HAL_GPIO_Init+0x210>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_GPIO_Init+0x304>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d025      	beq.n	8002024 <HAL_GPIO_Init+0x20c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a51      	ldr	r2, [pc, #324]	; (8002120 <HAL_GPIO_Init+0x308>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d01f      	beq.n	8002020 <HAL_GPIO_Init+0x208>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_GPIO_Init+0x30c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d019      	beq.n	800201c <HAL_GPIO_Init+0x204>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a4f      	ldr	r2, [pc, #316]	; (8002128 <HAL_GPIO_Init+0x310>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d013      	beq.n	8002018 <HAL_GPIO_Init+0x200>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a4e      	ldr	r2, [pc, #312]	; (800212c <HAL_GPIO_Init+0x314>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00d      	beq.n	8002014 <HAL_GPIO_Init+0x1fc>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a4d      	ldr	r2, [pc, #308]	; (8002130 <HAL_GPIO_Init+0x318>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d007      	beq.n	8002010 <HAL_GPIO_Init+0x1f8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a4c      	ldr	r2, [pc, #304]	; (8002134 <HAL_GPIO_Init+0x31c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d101      	bne.n	800200c <HAL_GPIO_Init+0x1f4>
 8002008:	2307      	movs	r3, #7
 800200a:	e00e      	b.n	800202a <HAL_GPIO_Init+0x212>
 800200c:	2308      	movs	r3, #8
 800200e:	e00c      	b.n	800202a <HAL_GPIO_Init+0x212>
 8002010:	2306      	movs	r3, #6
 8002012:	e00a      	b.n	800202a <HAL_GPIO_Init+0x212>
 8002014:	2305      	movs	r3, #5
 8002016:	e008      	b.n	800202a <HAL_GPIO_Init+0x212>
 8002018:	2304      	movs	r3, #4
 800201a:	e006      	b.n	800202a <HAL_GPIO_Init+0x212>
 800201c:	2303      	movs	r3, #3
 800201e:	e004      	b.n	800202a <HAL_GPIO_Init+0x212>
 8002020:	2302      	movs	r3, #2
 8002022:	e002      	b.n	800202a <HAL_GPIO_Init+0x212>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_GPIO_Init+0x212>
 8002028:	2300      	movs	r3, #0
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	f002 0203 	and.w	r2, r2, #3
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	4093      	lsls	r3, r2
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800203a:	4937      	ldr	r1, [pc, #220]	; (8002118 <HAL_GPIO_Init+0x300>)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_GPIO_Init+0x320>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800206c:	4a32      	ldr	r2, [pc, #200]	; (8002138 <HAL_GPIO_Init+0x320>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002072:	4b31      	ldr	r3, [pc, #196]	; (8002138 <HAL_GPIO_Init+0x320>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002096:	4a28      	ldr	r2, [pc, #160]	; (8002138 <HAL_GPIO_Init+0x320>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800209c:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_GPIO_Init+0x320>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_GPIO_Init+0x320>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_GPIO_Init+0x320>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ea:	4a13      	ldr	r2, [pc, #76]	; (8002138 <HAL_GPIO_Init+0x320>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	3301      	adds	r3, #1
 80020f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	f47f ae91 	bne.w	8001e28 <HAL_GPIO_Init+0x10>
  }
}
 8002106:	bf00      	nop
 8002108:	bf00      	nop
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40021000 	.word	0x40021000
 8002118:	40010000 	.word	0x40010000
 800211c:	48000400 	.word	0x48000400
 8002120:	48000800 	.word	0x48000800
 8002124:	48000c00 	.word	0x48000c00
 8002128:	48001000 	.word	0x48001000
 800212c:	48001400 	.word	0x48001400
 8002130:	48001800 	.word	0x48001800
 8002134:	48001c00 	.word	0x48001c00
 8002138:	40010400 	.word	0x40010400

0800213c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e001      	b.n	800215e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800217c:	787b      	ldrb	r3, [r7, #1]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002188:	e002      	b.n	8002190 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4013      	ands	r3, r2
 80021b4:	041a      	lsls	r2, r3, #16
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	43d9      	mvns	r1, r3
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	400b      	ands	r3, r1
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_PWREx_GetVoltageRange+0x3c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e0:	d102      	bne.n	80021e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80021e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e6:	e00b      	b.n	8002200 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_PWREx_GetVoltageRange+0x3c>)
 80021ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f6:	d102      	bne.n	80021fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80021f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021fc:	e000      	b.n	8002200 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80021fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40007000 	.word	0x40007000

08002210 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d141      	bne.n	80022a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800221e:	4b4b      	ldr	r3, [pc, #300]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222a:	d131      	bne.n	8002290 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800222c:	4b47      	ldr	r3, [pc, #284]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800222e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002232:	4a46      	ldr	r2, [pc, #280]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002238:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800223c:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002244:	4a41      	ldr	r2, [pc, #260]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800224c:	4b40      	ldr	r3, [pc, #256]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2232      	movs	r2, #50	; 0x32
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	4a3f      	ldr	r2, [pc, #252]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	0c9b      	lsrs	r3, r3, #18
 800225e:	3301      	adds	r3, #1
 8002260:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002262:	e002      	b.n	800226a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3b01      	subs	r3, #1
 8002268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800226a:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002276:	d102      	bne.n	800227e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f2      	bne.n	8002264 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800227e:	4b33      	ldr	r3, [pc, #204]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228a:	d158      	bne.n	800233e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e057      	b.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002290:	4b2e      	ldr	r3, [pc, #184]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002296:	4a2d      	ldr	r2, [pc, #180]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800229c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022a0:	e04d      	b.n	800233e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a8:	d141      	bne.n	800232e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022aa:	4b28      	ldr	r3, [pc, #160]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b6:	d131      	bne.n	800231c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022b8:	4b24      	ldr	r3, [pc, #144]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022be:	4a23      	ldr	r2, [pc, #140]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022d0:	4a1e      	ldr	r2, [pc, #120]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2232      	movs	r2, #50	; 0x32
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	0c9b      	lsrs	r3, r3, #18
 80022ea:	3301      	adds	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ee:	e002      	b.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002302:	d102      	bne.n	800230a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f2      	bne.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002316:	d112      	bne.n	800233e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e011      	b.n	8002340 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800231e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002328:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800232c:	e007      	b.n	800233e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800233c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40007000 	.word	0x40007000
 8002350:	20000000 	.word	0x20000000
 8002354:	431bde83 	.word	0x431bde83

08002358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	f000 bc16 	b.w	8002b98 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236c:	4ba0      	ldr	r3, [pc, #640]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002376:	4b9e      	ldr	r3, [pc, #632]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80e4 	beq.w	8002556 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <HAL_RCC_OscConfig+0x4c>
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	f040 808b 	bne.w	80024b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	f040 8087 	bne.w	80024b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a4:	4b92      	ldr	r3, [pc, #584]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_OscConfig+0x64>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e3ed      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1a      	ldr	r2, [r3, #32]
 80023c0:	4b8b      	ldr	r3, [pc, #556]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d004      	beq.n	80023d6 <HAL_RCC_OscConfig+0x7e>
 80023cc:	4b88      	ldr	r3, [pc, #544]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d4:	e005      	b.n	80023e2 <HAL_RCC_OscConfig+0x8a>
 80023d6:	4b86      	ldr	r3, [pc, #536]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d223      	bcs.n	800242e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fd9e 	bl	8002f2c <RCC_SetFlashLatencyFromMSIRange>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e3ce      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023fa:	4b7d      	ldr	r3, [pc, #500]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7c      	ldr	r2, [pc, #496]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b7a      	ldr	r3, [pc, #488]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4977      	ldr	r1, [pc, #476]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002418:	4b75      	ldr	r3, [pc, #468]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	4972      	ldr	r1, [pc, #456]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e025      	b.n	800247a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800242e:	4b70      	ldr	r3, [pc, #448]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6f      	ldr	r2, [pc, #444]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b6d      	ldr	r3, [pc, #436]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	496a      	ldr	r1, [pc, #424]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800244c:	4b68      	ldr	r3, [pc, #416]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	4965      	ldr	r1, [pc, #404]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fd5e 	bl	8002f2c <RCC_SetFlashLatencyFromMSIRange>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e38e      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800247a:	f000 fcbf 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 800247e:	4602      	mov	r2, r0
 8002480:	4b5b      	ldr	r3, [pc, #364]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	495a      	ldr	r1, [pc, #360]	; (80025f4 <HAL_RCC_OscConfig+0x29c>)
 800248c:	5ccb      	ldrb	r3, [r1, r3]
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	fa22 f303 	lsr.w	r3, r2, r3
 8002496:	4a58      	ldr	r2, [pc, #352]	; (80025f8 <HAL_RCC_OscConfig+0x2a0>)
 8002498:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800249a:	4b58      	ldr	r3, [pc, #352]	; (80025fc <HAL_RCC_OscConfig+0x2a4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fa7a 	bl	8000998 <HAL_InitTick>
 80024a4:	4603      	mov	r3, r0
 80024a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d052      	beq.n	8002554 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	e372      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d032      	beq.n	8002520 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024ba:	4b4d      	ldr	r3, [pc, #308]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a4c      	ldr	r2, [pc, #304]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024c6:	f7fe fab7 	bl	8000a38 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ce:	f7fe fab3 	bl	8000a38 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e35b      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024e0:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ec:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a3f      	ldr	r2, [pc, #252]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024f2:	f043 0308 	orr.w	r3, r3, #8
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	493a      	ldr	r1, [pc, #232]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800250a:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	4935      	ldr	r1, [pc, #212]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800251a:	4313      	orrs	r3, r2
 800251c:	604b      	str	r3, [r1, #4]
 800251e:	e01a      	b.n	8002556 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002520:	4b33      	ldr	r3, [pc, #204]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a32      	ldr	r2, [pc, #200]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800252c:	f7fe fa84 	bl	8000a38 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002534:	f7fe fa80 	bl	8000a38 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e328      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002546:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x1dc>
 8002552:	e000      	b.n	8002556 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002554:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d073      	beq.n	800264a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d005      	beq.n	8002574 <HAL_RCC_OscConfig+0x21c>
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d10e      	bne.n	800258c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d10b      	bne.n	800258c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d063      	beq.n	8002648 <HAL_RCC_OscConfig+0x2f0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d15f      	bne.n	8002648 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e305      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002594:	d106      	bne.n	80025a4 <HAL_RCC_OscConfig+0x24c>
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e01d      	b.n	80025e0 <HAL_RCC_OscConfig+0x288>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x270>
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a0c      	ldr	r2, [pc, #48]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0x288>
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <HAL_RCC_OscConfig+0x298>)
 80025da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01b      	beq.n	8002620 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fa26 	bl	8000a38 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ee:	e010      	b.n	8002612 <HAL_RCC_OscConfig+0x2ba>
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08003bdc 	.word	0x08003bdc
 80025f8:	20000000 	.word	0x20000000
 80025fc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe fa1a 	bl	8000a38 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e2c2      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002612:	4baf      	ldr	r3, [pc, #700]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x2a8>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fa0a 	bl	8000a38 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fa06 	bl	8000a38 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e2ae      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800263a:	4ba5      	ldr	r3, [pc, #660]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x2d0>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d060      	beq.n	8002718 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d005      	beq.n	8002668 <HAL_RCC_OscConfig+0x310>
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d119      	bne.n	8002696 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d116      	bne.n	8002696 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002668:	4b99      	ldr	r3, [pc, #612]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x328>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e28b      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b93      	ldr	r3, [pc, #588]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	4990      	ldr	r1, [pc, #576]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002694:	e040      	b.n	8002718 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d023      	beq.n	80026e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800269e:	4b8c      	ldr	r3, [pc, #560]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a8b      	ldr	r2, [pc, #556]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7fe f9c5 	bl	8000a38 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b2:	f7fe f9c1 	bl	8000a38 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e269      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c4:	4b82      	ldr	r3, [pc, #520]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b7f      	ldr	r3, [pc, #508]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	497c      	ldr	r1, [pc, #496]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
 80026e4:	e018      	b.n	8002718 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e6:	4b7a      	ldr	r3, [pc, #488]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a79      	ldr	r2, [pc, #484]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80026ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe f9a1 	bl	8000a38 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe f99d 	bl	8000a38 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e245      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800270c:	4b70      	ldr	r3, [pc, #448]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1f0      	bne.n	80026fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b00      	cmp	r3, #0
 8002722:	d03c      	beq.n	800279e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01c      	beq.n	8002766 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272c:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002732:	4a67      	ldr	r2, [pc, #412]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe f97c 	bl	8000a38 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7fe f978 	bl	8000a38 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e220      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002756:	4b5e      	ldr	r3, [pc, #376]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ef      	beq.n	8002744 <HAL_RCC_OscConfig+0x3ec>
 8002764:	e01b      	b.n	800279e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002766:	4b5a      	ldr	r3, [pc, #360]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800276c:	4a58      	ldr	r2, [pc, #352]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7fe f95f 	bl	8000a38 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277e:	f7fe f95b 	bl	8000a38 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e203      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002790:	4b4f      	ldr	r3, [pc, #316]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ef      	bne.n	800277e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80a6 	beq.w	80028f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ac:	2300      	movs	r3, #0
 80027ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027b0:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10d      	bne.n	80027d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027bc:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	4a43      	ldr	r2, [pc, #268]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80027c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c6:	6593      	str	r3, [r2, #88]	; 0x58
 80027c8:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d4:	2301      	movs	r3, #1
 80027d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d8:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_RCC_OscConfig+0x57c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d118      	bne.n	8002816 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <HAL_RCC_OscConfig+0x57c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a3a      	ldr	r2, [pc, #232]	; (80028d4 <HAL_RCC_OscConfig+0x57c>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f0:	f7fe f922 	bl	8000a38 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f8:	f7fe f91e 	bl	8000a38 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e1c6      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280a:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <HAL_RCC_OscConfig+0x57c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d108      	bne.n	8002830 <HAL_RCC_OscConfig+0x4d8>
 800281e:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	4a2a      	ldr	r2, [pc, #168]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800282e:	e024      	b.n	800287a <HAL_RCC_OscConfig+0x522>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b05      	cmp	r3, #5
 8002836:	d110      	bne.n	800285a <HAL_RCC_OscConfig+0x502>
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800283a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283e:	4a24      	ldr	r2, [pc, #144]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002858:	e00f      	b.n	800287a <HAL_RCC_OscConfig+0x522>
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	4a1b      	ldr	r2, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002862:	f023 0301 	bic.w	r3, r3, #1
 8002866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800286a:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 800286c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002870:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d016      	beq.n	80028b0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe f8d9 	bl	8000a38 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7fe f8d5 	bl	8000a38 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e17b      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_OscConfig+0x578>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ed      	beq.n	800288a <HAL_RCC_OscConfig+0x532>
 80028ae:	e01a      	b.n	80028e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7fe f8c2 	bl	8000a38 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028b6:	e00f      	b.n	80028d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fe f8be 	bl	8000a38 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d906      	bls.n	80028d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e164      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028d8:	4ba8      	ldr	r3, [pc, #672]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e8      	bne.n	80028b8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e6:	7ffb      	ldrb	r3, [r7, #31]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d105      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ec:	4ba3      	ldr	r3, [pc, #652]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	4aa2      	ldr	r2, [pc, #648]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 80028f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b00      	cmp	r3, #0
 8002902:	d03c      	beq.n	800297e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01c      	beq.n	8002946 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800290c:	4b9b      	ldr	r3, [pc, #620]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 800290e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002912:	4a9a      	ldr	r2, [pc, #616]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7fe f88c 	bl	8000a38 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002924:	f7fe f888 	bl	8000a38 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e130      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002936:	4b91      	ldr	r3, [pc, #580]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002938:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ef      	beq.n	8002924 <HAL_RCC_OscConfig+0x5cc>
 8002944:	e01b      	b.n	800297e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002946:	4b8d      	ldr	r3, [pc, #564]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002948:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800294c:	4a8b      	ldr	r2, [pc, #556]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7fe f86f 	bl	8000a38 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800295e:	f7fe f86b 	bl	8000a38 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e113      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002970:	4b82      	ldr	r3, [pc, #520]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1ef      	bne.n	800295e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8107 	beq.w	8002b96 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	2b02      	cmp	r3, #2
 800298e:	f040 80cb 	bne.w	8002b28 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002992:	4b7a      	ldr	r3, [pc, #488]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f003 0203 	and.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d12c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	3b01      	subs	r3, #1
 80029b2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d123      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d11b      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d113      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	3b01      	subs	r3, #1
 80029e6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d109      	bne.n	8002a00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	3b01      	subs	r3, #1
 80029fa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d06d      	beq.n	8002adc <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d068      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a06:	4b5d      	ldr	r3, [pc, #372]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d105      	bne.n	8002a1e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a12:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0ba      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a22:	4b56      	ldr	r3, [pc, #344]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a55      	ldr	r2, [pc, #340]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a2e:	f7fe f803 	bl	8000a38 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a36:	f7fd ffff 	bl	8000a38 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e0a7      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a48:	4b4c      	ldr	r3, [pc, #304]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f0      	bne.n	8002a36 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a54:	4b49      	ldr	r3, [pc, #292]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	4b49      	ldr	r3, [pc, #292]	; (8002b80 <HAL_RCC_OscConfig+0x828>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a64:	3a01      	subs	r2, #1
 8002a66:	0112      	lsls	r2, r2, #4
 8002a68:	4311      	orrs	r1, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a6e:	0212      	lsls	r2, r2, #8
 8002a70:	4311      	orrs	r1, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a76:	0852      	lsrs	r2, r2, #1
 8002a78:	3a01      	subs	r2, #1
 8002a7a:	0552      	lsls	r2, r2, #21
 8002a7c:	4311      	orrs	r1, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a82:	0852      	lsrs	r2, r2, #1
 8002a84:	3a01      	subs	r2, #1
 8002a86:	0652      	lsls	r2, r2, #25
 8002a88:	4311      	orrs	r1, r2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a8e:	06d2      	lsls	r2, r2, #27
 8002a90:	430a      	orrs	r2, r1
 8002a92:	493a      	ldr	r1, [pc, #232]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a98:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a37      	ldr	r2, [pc, #220]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002aa4:	4b35      	ldr	r3, [pc, #212]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a34      	ldr	r2, [pc, #208]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002aaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ab0:	f7fd ffc2 	bl	8000a38 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7fd ffbe 	bl	8000a38 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e066      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad6:	e05e      	b.n	8002b96 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e05d      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002adc:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d156      	bne.n	8002b96 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ae8:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a23      	ldr	r2, [pc, #140]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af4:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4a20      	ldr	r2, [pc, #128]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002afe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b00:	f7fd ff9a 	bl	8000a38 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fd ff96 	bl	8000a38 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e03e      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x7b0>
 8002b26:	e036      	b.n	8002b96 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d031      	beq.n	8002b92 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a12      	ldr	r2, [pc, #72]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002b34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b38:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d105      	bne.n	8002b52 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002b4c:	f023 0303 	bic.w	r3, r3, #3
 8002b50:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <HAL_RCC_OscConfig+0x824>)
 8002b58:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7fd ff69 	bl	8000a38 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b68:	e00c      	b.n	8002b84 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fd ff65 	bl	8000a38 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d905      	bls.n	8002b84 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e00d      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_RCC_OscConfig+0x848>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ec      	bne.n	8002b6a <HAL_RCC_OscConfig+0x812>
 8002b90:	e001      	b.n	8002b96 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e10f      	b.n	8002ddc <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b89      	ldr	r3, [pc, #548]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d910      	bls.n	8002bec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b86      	ldr	r3, [pc, #536]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 020f 	bic.w	r2, r3, #15
 8002bd2:	4984      	ldr	r1, [pc, #528]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b82      	ldr	r3, [pc, #520]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d001      	beq.n	8002bec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0f7      	b.n	8002ddc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8089 	beq.w	8002d0c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d133      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c02:	4b79      	ldr	r3, [pc, #484]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e0e4      	b.n	8002ddc <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002c12:	f000 f9e5 	bl	8002fe0 <RCC_GetSysClockFreqFromPLLSource>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4a74      	ldr	r2, [pc, #464]	; (8002dec <HAL_RCC_ClockConfig+0x248>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d955      	bls.n	8002cca <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002c1e:	4b72      	ldr	r3, [pc, #456]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c2a:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c32:	4a6d      	ldr	r2, [pc, #436]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e044      	b.n	8002cca <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d03e      	beq.n	8002cca <HAL_RCC_ClockConfig+0x126>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d13a      	bne.n	8002cca <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002c54:	4b64      	ldr	r3, [pc, #400]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c5c:	4a62      	ldr	r2, [pc, #392]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c62:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002c64:	2380      	movs	r3, #128	; 0x80
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e02f      	b.n	8002cca <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c72:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d115      	bne.n	8002caa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e0ac      	b.n	8002ddc <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c8a:	4b57      	ldr	r3, [pc, #348]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e0a0      	b.n	8002ddc <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c9a:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e098      	b.n	8002ddc <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002caa:	f000 f8a7 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a4e      	ldr	r2, [pc, #312]	; (8002dec <HAL_RCC_ClockConfig+0x248>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d909      	bls.n	8002cca <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cb6:	4b4c      	ldr	r3, [pc, #304]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cbe:	4a4a      	ldr	r2, [pc, #296]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cca:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f023 0203 	bic.w	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4944      	ldr	r1, [pc, #272]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cdc:	f7fd feac 	bl	8000a38 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce4:	f7fd fea8 	bl	8000a38 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e070      	b.n	8002ddc <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 020c 	and.w	r2, r3, #12
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1eb      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d18:	4b33      	ldr	r3, [pc, #204]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4930      	ldr	r1, [pc, #192]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	2b80      	cmp	r3, #128	; 0x80
 8002d30:	d105      	bne.n	8002d3e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002d32:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d3c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d3e:	4b29      	ldr	r3, [pc, #164]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d210      	bcs.n	8002d6e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4c:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 020f 	bic.w	r2, r3, #15
 8002d54:	4923      	ldr	r1, [pc, #140]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5c:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <HAL_RCC_ClockConfig+0x240>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d001      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e036      	b.n	8002ddc <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	4918      	ldr	r1, [pc, #96]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d009      	beq.n	8002dac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4910      	ldr	r1, [pc, #64]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dac:	f000 f826 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <HAL_RCC_ClockConfig+0x244>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	490c      	ldr	r1, [pc, #48]	; (8002df0 <HAL_RCC_ClockConfig+0x24c>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc8:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_RCC_ClockConfig+0x250>)
 8002dca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCC_ClockConfig+0x254>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fd fde1 	bl	8000998 <HAL_InitTick>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	73fb      	strb	r3, [r7, #15]

  return status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40022000 	.word	0x40022000
 8002de8:	40021000 	.word	0x40021000
 8002dec:	04c4b400 	.word	0x04c4b400
 8002df0:	08003bdc 	.word	0x08003bdc
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e14:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x34>
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d121      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d11e      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e30:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e3c:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e005      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e4c:	4b2d      	ldr	r3, [pc, #180]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e58:	4a2b      	ldr	r2, [pc, #172]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10d      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d102      	bne.n	8002e7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e74:	4b25      	ldr	r3, [pc, #148]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	e004      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e80:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b0c      	cmp	r3, #12
 8002e88:	d134      	bne.n	8002ef4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d003      	beq.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d003      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ea0:	e005      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ea4:	617b      	str	r3, [r7, #20]
      break;
 8002ea6:	e005      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eaa:	617b      	str	r3, [r7, #20]
      break;
 8002eac:	e002      	b.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	617b      	str	r3, [r7, #20]
      break;
 8002eb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eb4:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	fb02 f203 	mul.w	r2, r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	0e5b      	lsrs	r3, r3, #25
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3724      	adds	r7, #36	; 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08003bec 	.word	0x08003bec
 8002f0c:	00f42400 	.word	0x00f42400
 8002f10:	007a1200 	.word	0x007a1200

08002f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000000 	.word	0x20000000

08002f2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f38:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f44:	f7ff f944 	bl	80021d0 <HAL_PWREx_GetVoltageRange>
 8002f48:	6178      	str	r0, [r7, #20]
 8002f4a:	e014      	b.n	8002f76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	4a21      	ldr	r2, [pc, #132]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f56:	6593      	str	r3, [r2, #88]	; 0x58
 8002f58:	4b1f      	ldr	r3, [pc, #124]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f64:	f7ff f934 	bl	80021d0 <HAL_PWREx_GetVoltageRange>
 8002f68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6e:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7c:	d10b      	bne.n	8002f96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b80      	cmp	r3, #128	; 0x80
 8002f82:	d913      	bls.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2ba0      	cmp	r3, #160	; 0xa0
 8002f88:	d902      	bls.n	8002f90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	e00d      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f90:	2301      	movs	r3, #1
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	e00a      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b7f      	cmp	r3, #127	; 0x7f
 8002f9a:	d902      	bls.n	8002fa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e004      	b.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b70      	cmp	r3, #112	; 0x70
 8002fa6:	d101      	bne.n	8002fac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa8:	2301      	movs	r3, #1
 8002faa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 020f 	bic.w	r2, r3, #15
 8002fb4:	4909      	ldr	r1, [pc, #36]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fbc:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d001      	beq.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40022000 	.word	0x40022000

08002fe0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002fea:	4b2d      	ldr	r3, [pc, #180]	; (80030a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d118      	bne.n	8003028 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ff6:	4b2a      	ldr	r3, [pc, #168]	; (80030a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d107      	bne.n	8003012 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003002:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e005      	b.n	800301e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003012:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800301e:	4a21      	ldr	r2, [pc, #132]	; (80030a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003026:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003028:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d003      	beq.n	8003040 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b03      	cmp	r3, #3
 800303c:	d003      	beq.n	8003046 <RCC_GetSysClockFreqFromPLLSource+0x66>
 800303e:	e005      	b.n	800304c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003042:	613b      	str	r3, [r7, #16]
    break;
 8003044:	e005      	b.n	8003052 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003046:	4b19      	ldr	r3, [pc, #100]	; (80030ac <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003048:	613b      	str	r3, [r7, #16]
    break;
 800304a:	e002      	b.n	8003052 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	613b      	str	r3, [r7, #16]
    break;
 8003050:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	3301      	adds	r3, #1
 800305e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	fb02 f203 	mul.w	r2, r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	fbb2 f3f3 	udiv	r3, r2, r3
 8003076:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0e5b      	lsrs	r3, r3, #25
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	3301      	adds	r3, #1
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003092:	683b      	ldr	r3, [r7, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	40021000 	.word	0x40021000
 80030a4:	08003bec 	.word	0x08003bec
 80030a8:	00f42400 	.word	0x00f42400
 80030ac:	007a1200 	.word	0x007a1200

080030b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030b8:	2300      	movs	r3, #0
 80030ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030bc:	2300      	movs	r3, #0
 80030be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d040      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d0:	2b80      	cmp	r3, #128	; 0x80
 80030d2:	d02a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030d4:	2b80      	cmp	r3, #128	; 0x80
 80030d6:	d825      	bhi.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030d8:	2b60      	cmp	r3, #96	; 0x60
 80030da:	d026      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030dc:	2b60      	cmp	r3, #96	; 0x60
 80030de:	d821      	bhi.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030e0:	2b40      	cmp	r3, #64	; 0x40
 80030e2:	d006      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	d81d      	bhi.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d009      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d010      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80030f0:	e018      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030f2:	4b89      	ldr	r3, [pc, #548]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	4a88      	ldr	r2, [pc, #544]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030fe:	e015      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3304      	adds	r3, #4
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fb02 	bl	8003710 <RCCEx_PLLSAI1_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003110:	e00c      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3320      	adds	r3, #32
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fbed 	bl	80038f8 <RCCEx_PLLSAI2_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003122:	e003      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	74fb      	strb	r3, [r7, #19]
      break;
 8003128:	e000      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800312a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10b      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003132:	4b79      	ldr	r3, [pc, #484]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003134:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003138:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003140:	4975      	ldr	r1, [pc, #468]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003148:	e001      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314a:	7cfb      	ldrb	r3, [r7, #19]
 800314c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d047      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	d030      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003168:	d82a      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800316a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800316e:	d02a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003174:	d824      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317a:	d008      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800317c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003180:	d81e      	bhi.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800318a:	d010      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800318c:	e018      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800318e:	4b62      	ldr	r3, [pc, #392]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	4a61      	ldr	r2, [pc, #388]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800319a:	e015      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3304      	adds	r3, #4
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fab4 	bl	8003710 <RCCEx_PLLSAI1_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031ac:	e00c      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3320      	adds	r3, #32
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fb9f 	bl	80038f8 <RCCEx_PLLSAI2_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031be:	e003      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	74fb      	strb	r3, [r7, #19]
      break;
 80031c4:	e000      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80031c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10b      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031ce:	4b52      	ldr	r3, [pc, #328]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	494e      	ldr	r1, [pc, #312]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80031e4:	e001      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 809f 	beq.w	8003336 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f8:	2300      	movs	r3, #0
 80031fa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031fc:	4b46      	ldr	r3, [pc, #280]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800320c:	2300      	movs	r3, #0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	4a40      	ldr	r2, [pc, #256]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321c:	6593      	str	r3, [r2, #88]	; 0x58
 800321e:	4b3e      	ldr	r3, [pc, #248]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	2301      	movs	r3, #1
 800322c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800322e:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a3a      	ldr	r2, [pc, #232]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003238:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800323a:	f7fd fbfd 	bl	8000a38 <HAL_GetTick>
 800323e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003240:	e009      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003242:	f7fd fbf9 	bl	8000a38 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d902      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	74fb      	strb	r3, [r7, #19]
        break;
 8003254:	e005      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003256:	4b31      	ldr	r3, [pc, #196]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ef      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003262:	7cfb      	ldrb	r3, [r7, #19]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d15b      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003268:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003272:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01f      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	429a      	cmp	r2, r3
 8003284:	d019      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003290:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003292:	4b21      	ldr	r3, [pc, #132]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	4a1f      	ldr	r2, [pc, #124]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800329a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032b2:	4a19      	ldr	r2, [pc, #100]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d016      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fd fbb8 	bl	8000a38 <HAL_GetTick>
 80032c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ca:	e00b      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fd fbb4 	bl	8000a38 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d902      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	74fb      	strb	r3, [r7, #19]
            break;
 80032e2:	e006      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ec      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80032f2:	7cfb      	ldrb	r3, [r7, #19]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10c      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f8:	4b07      	ldr	r3, [pc, #28]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	4903      	ldr	r1, [pc, #12]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003310:	e008      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003312:	7cfb      	ldrb	r3, [r7, #19]
 8003314:	74bb      	strb	r3, [r7, #18]
 8003316:	e005      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003318:	40021000 	.word	0x40021000
 800331c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003324:	7c7b      	ldrb	r3, [r7, #17]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332a:	4ba0      	ldr	r3, [pc, #640]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332e:	4a9f      	ldr	r2, [pc, #636]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003334:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003342:	4b9a      	ldr	r3, [pc, #616]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003348:	f023 0203 	bic.w	r2, r3, #3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003350:	4996      	ldr	r1, [pc, #600]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003364:	4b91      	ldr	r3, [pc, #580]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336a:	f023 020c 	bic.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	498e      	ldr	r1, [pc, #568]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003386:	4b89      	ldr	r3, [pc, #548]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	4985      	ldr	r1, [pc, #532]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033a8:	4b80      	ldr	r3, [pc, #512]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b6:	497d      	ldr	r1, [pc, #500]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033ca:	4b78      	ldr	r3, [pc, #480]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d8:	4974      	ldr	r1, [pc, #464]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033ec:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fa:	496c      	ldr	r1, [pc, #432]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800340e:	4b67      	ldr	r3, [pc, #412]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341c:	4963      	ldr	r1, [pc, #396]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003430:	4b5e      	ldr	r3, [pc, #376]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800343e:	495b      	ldr	r1, [pc, #364]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003452:	4b56      	ldr	r3, [pc, #344]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	4952      	ldr	r1, [pc, #328]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003474:	4b4d      	ldr	r3, [pc, #308]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	494a      	ldr	r1, [pc, #296]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003484:	4313      	orrs	r3, r2
 8003486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00a      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003496:	4b45      	ldr	r3, [pc, #276]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a4:	4941      	ldr	r1, [pc, #260]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034b8:	4b3c      	ldr	r3, [pc, #240]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034be:	f023 0203 	bic.w	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c6:	4939      	ldr	r1, [pc, #228]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d028      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034da:	4b34      	ldr	r3, [pc, #208]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e8:	4930      	ldr	r1, [pc, #192]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034f8:	d106      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034fa:	4b2c      	ldr	r3, [pc, #176]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	4a2b      	ldr	r2, [pc, #172]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003504:	60d3      	str	r3, [r2, #12]
 8003506:	e011      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003510:	d10c      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3304      	adds	r3, #4
 8003516:	2101      	movs	r1, #1
 8003518:	4618      	mov	r0, r3
 800351a:	f000 f8f9 	bl	8003710 <RCCEx_PLLSAI1_Config>
 800351e:	4603      	mov	r3, r0
 8003520:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003522:	7cfb      	ldrb	r3, [r7, #19]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d04d      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800353c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003540:	d108      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003544:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003548:	4a18      	ldr	r2, [pc, #96]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800354a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800354e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003552:	e012      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003554:	4b15      	ldr	r3, [pc, #84]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800355a:	4a14      	ldr	r2, [pc, #80]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003560:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003572:	490e      	ldr	r1, [pc, #56]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003582:	d106      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a08      	ldr	r2, [pc, #32]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800358e:	60d3      	str	r3, [r2, #12]
 8003590:	e020      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800359a:	d109      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a02      	ldr	r2, [pc, #8]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a6:	60d3      	str	r3, [r2, #12]
 80035a8:	e014      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	2101      	movs	r1, #1
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f8a5 	bl	8003710 <RCCEx_PLLSAI1_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d028      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e0:	4b4a      	ldr	r3, [pc, #296]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ee:	4947      	ldr	r1, [pc, #284]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035fe:	d106      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003600:	4b42      	ldr	r3, [pc, #264]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a41      	ldr	r2, [pc, #260]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800360a:	60d3      	str	r3, [r2, #12]
 800360c:	e011      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003616:	d10c      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	2101      	movs	r1, #1
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f876 	bl	8003710 <RCCEx_PLLSAI1_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01e      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800363e:	4b33      	ldr	r3, [pc, #204]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800364e:	492f      	ldr	r1, [pc, #188]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003650:	4313      	orrs	r3, r2
 8003652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003660:	d10c      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	2102      	movs	r1, #2
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f851 	bl	8003710 <RCCEx_PLLSAI1_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003672:	7cfb      	ldrb	r3, [r7, #19]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003688:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800368a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800368e:	f023 0204 	bic.w	r2, r3, #4
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003698:	491c      	ldr	r1, [pc, #112]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00b      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036b2:	f023 0218 	bic.w	r2, r3, #24
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	4913      	ldr	r1, [pc, #76]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d017      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e0:	490a      	ldr	r1, [pc, #40]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036f2:	d105      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a04      	ldr	r2, [pc, #16]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003700:	7cbb      	ldrb	r3, [r7, #18]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000

08003710 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800371e:	4b72      	ldr	r3, [pc, #456]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00e      	beq.n	8003748 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800372a:	4b6f      	ldr	r3, [pc, #444]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0203 	and.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d103      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
       ||
 800373e:	2b00      	cmp	r3, #0
 8003740:	d142      	bne.n	80037c8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e03f      	b.n	80037c8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d018      	beq.n	8003782 <RCCEx_PLLSAI1_Config+0x72>
 8003750:	2b03      	cmp	r3, #3
 8003752:	d825      	bhi.n	80037a0 <RCCEx_PLLSAI1_Config+0x90>
 8003754:	2b01      	cmp	r3, #1
 8003756:	d002      	beq.n	800375e <RCCEx_PLLSAI1_Config+0x4e>
 8003758:	2b02      	cmp	r3, #2
 800375a:	d009      	beq.n	8003770 <RCCEx_PLLSAI1_Config+0x60>
 800375c:	e020      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800375e:	4b62      	ldr	r3, [pc, #392]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d11d      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376e:	e01a      	b.n	80037a6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003770:	4b5d      	ldr	r3, [pc, #372]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003780:	e013      	b.n	80037aa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003782:	4b59      	ldr	r3, [pc, #356]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800378e:	4b56      	ldr	r3, [pc, #344]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800379e:	e006      	b.n	80037ae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	e004      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80037ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d108      	bne.n	80037c8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80037b6:	4b4c      	ldr	r3, [pc, #304]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4949      	ldr	r1, [pc, #292]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f040 8086 	bne.w	80038dc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037d0:	4b45      	ldr	r3, [pc, #276]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a44      	ldr	r2, [pc, #272]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037dc:	f7fd f92c 	bl	8000a38 <HAL_GetTick>
 80037e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037e2:	e009      	b.n	80037f8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037e4:	f7fd f928 	bl	8000a38 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d902      	bls.n	80037f8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	73fb      	strb	r3, [r7, #15]
        break;
 80037f6:	e005      	b.n	8003804 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037f8:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ef      	bne.n	80037e4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d168      	bne.n	80038dc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d113      	bne.n	8003838 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003810:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	4b35      	ldr	r3, [pc, #212]	; (80038ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003816:	4013      	ands	r3, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6892      	ldr	r2, [r2, #8]
 800381c:	0211      	lsls	r1, r2, #8
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68d2      	ldr	r2, [r2, #12]
 8003822:	06d2      	lsls	r2, r2, #27
 8003824:	4311      	orrs	r1, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6852      	ldr	r2, [r2, #4]
 800382a:	3a01      	subs	r2, #1
 800382c:	0112      	lsls	r2, r2, #4
 800382e:	430a      	orrs	r2, r1
 8003830:	492d      	ldr	r1, [pc, #180]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003832:	4313      	orrs	r3, r2
 8003834:	610b      	str	r3, [r1, #16]
 8003836:	e02d      	b.n	8003894 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d115      	bne.n	800386a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800383e:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003844:	4013      	ands	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6892      	ldr	r2, [r2, #8]
 800384a:	0211      	lsls	r1, r2, #8
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6912      	ldr	r2, [r2, #16]
 8003850:	0852      	lsrs	r2, r2, #1
 8003852:	3a01      	subs	r2, #1
 8003854:	0552      	lsls	r2, r2, #21
 8003856:	4311      	orrs	r1, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6852      	ldr	r2, [r2, #4]
 800385c:	3a01      	subs	r2, #1
 800385e:	0112      	lsls	r2, r2, #4
 8003860:	430a      	orrs	r2, r1
 8003862:	4921      	ldr	r1, [pc, #132]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003864:	4313      	orrs	r3, r2
 8003866:	610b      	str	r3, [r1, #16]
 8003868:	e014      	b.n	8003894 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800386a:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003870:	4013      	ands	r3, r2
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6892      	ldr	r2, [r2, #8]
 8003876:	0211      	lsls	r1, r2, #8
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6952      	ldr	r2, [r2, #20]
 800387c:	0852      	lsrs	r2, r2, #1
 800387e:	3a01      	subs	r2, #1
 8003880:	0652      	lsls	r2, r2, #25
 8003882:	4311      	orrs	r1, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6852      	ldr	r2, [r2, #4]
 8003888:	3a01      	subs	r2, #1
 800388a:	0112      	lsls	r2, r2, #4
 800388c:	430a      	orrs	r2, r1
 800388e:	4916      	ldr	r1, [pc, #88]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003890:	4313      	orrs	r3, r2
 8003892:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a13      	ldr	r2, [pc, #76]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800389a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800389e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fd f8ca 	bl	8000a38 <HAL_GetTick>
 80038a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038a6:	e009      	b.n	80038bc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a8:	f7fd f8c6 	bl	8000a38 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d902      	bls.n	80038bc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	73fb      	strb	r3, [r7, #15]
          break;
 80038ba:	e005      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ef      	beq.n	80038a8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	4904      	ldr	r1, [pc, #16]	; (80038e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000
 80038ec:	07ff800f 	.word	0x07ff800f
 80038f0:	ff9f800f 	.word	0xff9f800f
 80038f4:	f9ff800f 	.word	0xf9ff800f

080038f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003906:	4b72      	ldr	r3, [pc, #456]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00e      	beq.n	8003930 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003912:	4b6f      	ldr	r3, [pc, #444]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0203 	and.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d103      	bne.n	800392a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
       ||
 8003926:	2b00      	cmp	r3, #0
 8003928:	d142      	bne.n	80039b0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
 800392e:	e03f      	b.n	80039b0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d018      	beq.n	800396a <RCCEx_PLLSAI2_Config+0x72>
 8003938:	2b03      	cmp	r3, #3
 800393a:	d825      	bhi.n	8003988 <RCCEx_PLLSAI2_Config+0x90>
 800393c:	2b01      	cmp	r3, #1
 800393e:	d002      	beq.n	8003946 <RCCEx_PLLSAI2_Config+0x4e>
 8003940:	2b02      	cmp	r3, #2
 8003942:	d009      	beq.n	8003958 <RCCEx_PLLSAI2_Config+0x60>
 8003944:	e020      	b.n	8003988 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003946:	4b62      	ldr	r3, [pc, #392]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d11d      	bne.n	800398e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003956:	e01a      	b.n	800398e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003958:	4b5d      	ldr	r3, [pc, #372]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003968:	e013      	b.n	8003992 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800396a:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10f      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003976:	4b56      	ldr	r3, [pc, #344]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003986:	e006      	b.n	8003996 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      break;
 800398c:	e004      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003996:	bf00      	nop
    }

    if(status == HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d108      	bne.n	80039b0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800399e:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4949      	ldr	r1, [pc, #292]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 8086 	bne.w	8003ac4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039b8:	4b45      	ldr	r3, [pc, #276]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a44      	ldr	r2, [pc, #272]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c4:	f7fd f838 	bl	8000a38 <HAL_GetTick>
 80039c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ca:	e009      	b.n	80039e0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039cc:	f7fd f834 	bl	8000a38 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	73fb      	strb	r3, [r7, #15]
        break;
 80039de:	e005      	b.n	80039ec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039e0:	4b3b      	ldr	r3, [pc, #236]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ef      	bne.n	80039cc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d168      	bne.n	8003ac4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d113      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039f8:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6892      	ldr	r2, [r2, #8]
 8003a04:	0211      	lsls	r1, r2, #8
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68d2      	ldr	r2, [r2, #12]
 8003a0a:	06d2      	lsls	r2, r2, #27
 8003a0c:	4311      	orrs	r1, r2
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6852      	ldr	r2, [r2, #4]
 8003a12:	3a01      	subs	r2, #1
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	430a      	orrs	r2, r1
 8003a18:	492d      	ldr	r1, [pc, #180]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	614b      	str	r3, [r1, #20]
 8003a1e:	e02d      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d115      	bne.n	8003a52 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a26:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a28:	695a      	ldr	r2, [r3, #20]
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	; (8003ad8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6892      	ldr	r2, [r2, #8]
 8003a32:	0211      	lsls	r1, r2, #8
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6912      	ldr	r2, [r2, #16]
 8003a38:	0852      	lsrs	r2, r2, #1
 8003a3a:	3a01      	subs	r2, #1
 8003a3c:	0552      	lsls	r2, r2, #21
 8003a3e:	4311      	orrs	r1, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6852      	ldr	r2, [r2, #4]
 8003a44:	3a01      	subs	r2, #1
 8003a46:	0112      	lsls	r2, r2, #4
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	4921      	ldr	r1, [pc, #132]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	614b      	str	r3, [r1, #20]
 8003a50:	e014      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a52:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	4b21      	ldr	r3, [pc, #132]	; (8003adc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6892      	ldr	r2, [r2, #8]
 8003a5e:	0211      	lsls	r1, r2, #8
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6952      	ldr	r2, [r2, #20]
 8003a64:	0852      	lsrs	r2, r2, #1
 8003a66:	3a01      	subs	r2, #1
 8003a68:	0652      	lsls	r2, r2, #25
 8003a6a:	4311      	orrs	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6852      	ldr	r2, [r2, #4]
 8003a70:	3a01      	subs	r2, #1
 8003a72:	0112      	lsls	r2, r2, #4
 8003a74:	430a      	orrs	r2, r1
 8003a76:	4916      	ldr	r1, [pc, #88]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a7c:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a88:	f7fc ffd6 	bl	8000a38 <HAL_GetTick>
 8003a8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a8e:	e009      	b.n	8003aa4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a90:	f7fc ffd2 	bl	8000a38 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d902      	bls.n	8003aa4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	73fb      	strb	r3, [r7, #15]
          break;
 8003aa2:	e005      	b.n	8003ab0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0ef      	beq.n	8003a90 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	4904      	ldr	r1, [pc, #16]	; (8003ad0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	07ff800f 	.word	0x07ff800f
 8003ad8:	ff9f800f 	.word	0xff9f800f
 8003adc:	f9ff800f 	.word	0xf9ff800f

08003ae0 <arm_sin_f32>:
 8003ae0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003b60 <arm_sin_f32+0x80>
 8003ae4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003ae8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003af4:	d504      	bpl.n	8003b00 <arm_sin_f32+0x20>
 8003af6:	ee17 3a90 	vmov	r3, s15
 8003afa:	3b01      	subs	r3, #1
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b04:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003b64 <arm_sin_f32+0x84>
 8003b08:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003b0c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003b10:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003b14:	ee17 3a90 	vmov	r3, s15
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b1e:	d21a      	bcs.n	8003b56 <arm_sin_f32+0x76>
 8003b20:	ee07 3a90 	vmov	s15, r3
 8003b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b28:	1c59      	adds	r1, r3, #1
 8003b2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003b2e:	4a0e      	ldr	r2, [pc, #56]	; (8003b68 <arm_sin_f32+0x88>)
 8003b30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003b34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003b38:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003b3c:	ed93 7a00 	vldr	s14, [r3]
 8003b40:	edd2 6a00 	vldr	s13, [r2]
 8003b44:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003b48:	ee20 0a26 	vmul.f32	s0, s0, s13
 8003b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b50:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003b54:	4770      	bx	lr
 8003b56:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e7e6      	b.n	8003b2e <arm_sin_f32+0x4e>
 8003b60:	3e22f983 	.word	0x3e22f983
 8003b64:	44000000 	.word	0x44000000
 8003b68:	08003c1c 	.word	0x08003c1c

08003b6c <__libc_init_array>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	4d0d      	ldr	r5, [pc, #52]	; (8003ba4 <__libc_init_array+0x38>)
 8003b70:	4c0d      	ldr	r4, [pc, #52]	; (8003ba8 <__libc_init_array+0x3c>)
 8003b72:	1b64      	subs	r4, r4, r5
 8003b74:	10a4      	asrs	r4, r4, #2
 8003b76:	2600      	movs	r6, #0
 8003b78:	42a6      	cmp	r6, r4
 8003b7a:	d109      	bne.n	8003b90 <__libc_init_array+0x24>
 8003b7c:	4d0b      	ldr	r5, [pc, #44]	; (8003bac <__libc_init_array+0x40>)
 8003b7e:	4c0c      	ldr	r4, [pc, #48]	; (8003bb0 <__libc_init_array+0x44>)
 8003b80:	f000 f820 	bl	8003bc4 <_init>
 8003b84:	1b64      	subs	r4, r4, r5
 8003b86:	10a4      	asrs	r4, r4, #2
 8003b88:	2600      	movs	r6, #0
 8003b8a:	42a6      	cmp	r6, r4
 8003b8c:	d105      	bne.n	8003b9a <__libc_init_array+0x2e>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b94:	4798      	blx	r3
 8003b96:	3601      	adds	r6, #1
 8003b98:	e7ee      	b.n	8003b78 <__libc_init_array+0xc>
 8003b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9e:	4798      	blx	r3
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	e7f2      	b.n	8003b8a <__libc_init_array+0x1e>
 8003ba4:	08004420 	.word	0x08004420
 8003ba8:	08004420 	.word	0x08004420
 8003bac:	08004420 	.word	0x08004420
 8003bb0:	08004424 	.word	0x08004424

08003bb4 <memset>:
 8003bb4:	4402      	add	r2, r0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d100      	bne.n	8003bbe <memset+0xa>
 8003bbc:	4770      	bx	lr
 8003bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc2:	e7f9      	b.n	8003bb8 <memset+0x4>

08003bc4 <_init>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	bf00      	nop
 8003bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bca:	bc08      	pop	{r3}
 8003bcc:	469e      	mov	lr, r3
 8003bce:	4770      	bx	lr

08003bd0 <_fini>:
 8003bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd2:	bf00      	nop
 8003bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd6:	bc08      	pop	{r3}
 8003bd8:	469e      	mov	lr, r3
 8003bda:	4770      	bx	lr
