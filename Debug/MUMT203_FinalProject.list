
MUMT203_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d90  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08003f4c  08003f4c  00013f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004790  08004790  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004790  08004790  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004790  08004790  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  080047a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080047a4  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f256  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db7  00000000  00000000  0002f292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00031050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  00031a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b019  00000000  00000000  00032350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad23  00000000  00000000  0005d369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e2af  00000000  00000000  0006808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0017633b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002740  00000000  00000000  00176404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  00178b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003f34 	.word	0x08003f34

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08003f34 	.word	0x08003f34

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	f5ad 5d6b 	sub.w	sp, sp, #15040	; 0x3ac0
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f000 fd67 	bl	8000cd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 fabc 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 fbd6 	bl	80009bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000210:	f000 fb30 	bl	8000874 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000214:	f000 fb92 	bl	800093c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000218:	2100      	movs	r1, #0
 800021a:	48c2      	ldr	r0, [pc, #776]	; (8000524 <main+0x328>)
 800021c:	f001 fddf 	bl	8001dde <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000220:	2110      	movs	r1, #16
 8000222:	48c0      	ldr	r0, [pc, #768]	; (8000524 <main+0x328>)
 8000224:	f001 fddb 	bl	8001dde <HAL_DAC_Start>

	uint8_t buttonPressed = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 800022e:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8000232:	7013      	strb	r3, [r2, #0]
	uint8_t isPlaying = 1;
 8000234:	2301      	movs	r3, #1
 8000236:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 800023a:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 800023e:	7013      	strb	r3, [r2, #0]
	float sine1000[S_1000];
	float sine500[S_500];
	float sine250[S_250];


	for (int i=0; i<S_2000; i++)
 8000240:	2300      	movs	r3, #0
 8000242:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 8000246:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800024a:	6013      	str	r3, [r2, #0]
 800024c:	e02d      	b.n	80002aa <main+0xae>
	{
		sine2000[i] = S_2000 * arm_sin_f32((float)i * (float)(2*PI/S_2000));
 800024e:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000252:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	ee07 3a90 	vmov	s15, r3
 800025c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000260:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8000528 <main+0x32c>
 8000264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000268:	eeb0 0a67 	vmov.f32	s0, s15
 800026c:	f003 fdf0 	bl	8003e50 <arm_sin_f32>
 8000270:	eef0 7a40 	vmov.f32	s15, s0
 8000274:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800052c <main+0x330>
 8000278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800027c:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8000280:	3b04      	subs	r3, #4
 8000282:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 8000286:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800028a:	6812      	ldr	r2, [r2, #0]
 800028c:	0092      	lsls	r2, r2, #2
 800028e:	4413      	add	r3, r2
 8000290:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<S_2000; i++)
 8000294:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000298:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	3301      	adds	r3, #1
 80002a0:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 80002a4:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80002a8:	6013      	str	r3, [r2, #0]
 80002aa:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80002ae:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002b8:	dbc9      	blt.n	800024e <main+0x52>
	}

	for (int i=0; i<S_1000; i++)
 80002ba:	2300      	movs	r3, #0
 80002bc:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 80002c0:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80002c4:	6013      	str	r3, [r2, #0]
 80002c6:	e02d      	b.n	8000324 <main+0x128>
	{
		sine1000[i] = S_1000 * arm_sin_f32((float)i * (float)(2*PI/S_1000));
 80002c8:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80002cc:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	ee07 3a90 	vmov	s15, r3
 80002d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002da:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8000530 <main+0x334>
 80002de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002e2:	eeb0 0a67 	vmov.f32	s0, s15
 80002e6:	f003 fdb3 	bl	8003e50 <arm_sin_f32>
 80002ea:	eef0 7a40 	vmov.f32	s15, s0
 80002ee:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8000534 <main+0x338>
 80002f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002f6:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 80002fa:	3b04      	subs	r3, #4
 80002fc:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 8000300:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000304:	6812      	ldr	r2, [r2, #0]
 8000306:	0092      	lsls	r2, r2, #2
 8000308:	4413      	add	r3, r2
 800030a:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<S_1000; i++)
 800030e:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000312:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	3301      	adds	r3, #1
 800031a:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 800031e:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000322:	6013      	str	r3, [r2, #0]
 8000324:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000328:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000332:	dbc9      	blt.n	80002c8 <main+0xcc>
	}

	for (int i=0; i<S_500; i++)
 8000334:	2300      	movs	r3, #0
 8000336:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 800033a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800033e:	6013      	str	r3, [r2, #0]
 8000340:	e02d      	b.n	800039e <main+0x1a2>
	{
		sine500[i] = S_500 * arm_sin_f32((float)i * (float)(2*PI/S_500));
 8000342:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000346:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	ee07 3a90 	vmov	s15, r3
 8000350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000354:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8000538 <main+0x33c>
 8000358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800035c:	eeb0 0a67 	vmov.f32	s0, s15
 8000360:	f003 fd76 	bl	8003e50 <arm_sin_f32>
 8000364:	eef0 7a40 	vmov.f32	s15, s0
 8000368:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800053c <main+0x340>
 800036c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000370:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8000374:	3b14      	subs	r3, #20
 8000376:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 800037a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800037e:	6812      	ldr	r2, [r2, #0]
 8000380:	0092      	lsls	r2, r2, #2
 8000382:	4413      	add	r3, r2
 8000384:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<S_500; i++)
 8000388:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 800038c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	3301      	adds	r3, #1
 8000394:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 8000398:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800039c:	6013      	str	r3, [r2, #0]
 800039e:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80003a2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80003ac:	dbc9      	blt.n	8000342 <main+0x146>
	}

	for (int i=0; i<S_250; i++)
 80003ae:	2300      	movs	r3, #0
 80003b0:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 80003b4:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80003b8:	6013      	str	r3, [r2, #0]
 80003ba:	e02d      	b.n	8000418 <main+0x21c>
	{
		sine250[i] = S_250 * arm_sin_f32((float)i * (float)(2*PI/S_250));
 80003bc:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80003c0:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	ee07 3a90 	vmov	s15, r3
 80003ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80003ce:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000540 <main+0x344>
 80003d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003d6:	eeb0 0a67 	vmov.f32	s0, s15
 80003da:	f003 fd39 	bl	8003e50 <arm_sin_f32>
 80003de:	eef0 7a40 	vmov.f32	s15, s0
 80003e2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8000544 <main+0x348>
 80003e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80003ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003ee:	3b3c      	subs	r3, #60	; 0x3c
 80003f0:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 80003f4:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80003f8:	6812      	ldr	r2, [r2, #0]
 80003fa:	0092      	lsls	r2, r2, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<S_250; i++)
 8000402:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000406:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3301      	adds	r3, #1
 800040e:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 8000412:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000416:	6013      	str	r3, [r2, #0]
 8000418:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 800041c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2bf9      	cmp	r3, #249	; 0xf9
 8000424:	ddca      	ble.n	80003bc <main+0x1c0>
	}

	float sin = 0; // Value to be played
 8000426:	f04f 0300 	mov.w	r3, #0
 800042a:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 800042e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000432:	6013      	str	r3, [r2, #0]

	// indexes
	uint16_t i_2000 = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 800043a:	f102 0226 	add.w	r2, r2, #38	; 0x26
 800043e:	8013      	strh	r3, [r2, #0]
	uint16_t i_1000 = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 8000446:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800044a:	8013      	strh	r3, [r2, #0]
	uint16_t i_500  = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 8000452:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8000456:	8013      	strh	r3, [r2, #0]
	uint16_t i_250  = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 800045e:	f102 0220 	add.w	r2, r2, #32
 8000462:	8013      	strh	r3, [r2, #0]

	uint16_t sin_to_play = 2000;
 8000464:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000468:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 800046c:	f102 021e 	add.w	r2, r2, #30
 8000470:	8013      	strh	r3, [r2, #0]
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(!HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin))
 8000472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000476:	4834      	ldr	r0, [pc, #208]	; (8000548 <main+0x34c>)
 8000478:	f002 f818 	bl	80024ac <HAL_GPIO_ReadPin>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d166      	bne.n	8000550 <main+0x354>
		{
			if(!buttonPressed)
 8000482:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000486:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d165      	bne.n	800055c <main+0x360>
			{
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000490:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000494:	482d      	ldr	r0, [pc, #180]	; (800054c <main+0x350>)
 8000496:	f002 f839 	bl	800250c <HAL_GPIO_TogglePin>
				buttonPressed = 1;
 800049a:	2301      	movs	r3, #1
 800049c:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 80004a0:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 80004a4:	7013      	strb	r3, [r2, #0]
				if (isPlaying == 1){
 80004a6:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80004aa:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d128      	bne.n	8000506 <main+0x30a>

					HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
 80004b4:	2100      	movs	r1, #0
 80004b6:	481b      	ldr	r0, [pc, #108]	; (8000524 <main+0x328>)
 80004b8:	f001 fce3 	bl	8001e82 <HAL_DAC_Stop>
					HAL_DAC_Stop(&hdac1, DAC_CHANNEL_2);
 80004bc:	2110      	movs	r1, #16
 80004be:	4819      	ldr	r0, [pc, #100]	; (8000524 <main+0x328>)
 80004c0:	f001 fcdf 	bl	8001e82 <HAL_DAC_Stop>

					// Change waves that will play
					if (sin_to_play != S_250)
 80004c4:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80004c8:	f103 031e 	add.w	r3, r3, #30
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	2bfa      	cmp	r3, #250	; 0xfa
 80004d0:	d00b      	beq.n	80004ea <main+0x2ee>
					{
						sin_to_play = sin_to_play / 2;
 80004d2:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80004d6:	f103 031e 	add.w	r3, r3, #30
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	085b      	lsrs	r3, r3, #1
 80004de:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 80004e2:	f102 021e 	add.w	r2, r2, #30
 80004e6:	8013      	strh	r3, [r2, #0]
 80004e8:	e006      	b.n	80004f8 <main+0x2fc>
					}
					else
					{
						sin_to_play = S_2000;
 80004ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80004ee:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 80004f2:	f102 021e 	add.w	r2, r2, #30
 80004f6:	8013      	strh	r3, [r2, #0]
					}


					isPlaying = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 80004fe:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8000502:	7013      	strb	r3, [r2, #0]
 8000504:	e02a      	b.n	800055c <main+0x360>
				}
				else {
					HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000506:	2100      	movs	r1, #0
 8000508:	4806      	ldr	r0, [pc, #24]	; (8000524 <main+0x328>)
 800050a:	f001 fc68 	bl	8001dde <HAL_DAC_Start>
					HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 800050e:	2110      	movs	r1, #16
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <main+0x328>)
 8000512:	f001 fc64 	bl	8001dde <HAL_DAC_Start>
					isPlaying = 1;
 8000516:	2301      	movs	r3, #1
 8000518:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 800051c:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8000520:	7013      	strb	r3, [r2, #0]
 8000522:	e01b      	b.n	800055c <main+0x360>
 8000524:	20000028 	.word	0x20000028
 8000528:	3b4de32e 	.word	0x3b4de32e
 800052c:	44fa0000 	.word	0x44fa0000
 8000530:	3bcde32e 	.word	0x3bcde32e
 8000534:	447a0000 	.word	0x447a0000
 8000538:	3c4de32e 	.word	0x3c4de32e
 800053c:	43fa0000 	.word	0x43fa0000
 8000540:	3ccde32e 	.word	0x3ccde32e
 8000544:	437a0000 	.word	0x437a0000
 8000548:	48000800 	.word	0x48000800
 800054c:	48000400 	.word	0x48000400
				}
			}
		}
		else
		{
			buttonPressed = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 8000556:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 800055a:	7013      	strb	r3, [r2, #0]
		}

		if (isPlaying == 1)
 800055c:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000560:	f103 033e 	add.w	r3, r3, #62	; 0x3e
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d183      	bne.n	8000472 <main+0x276>
		{
			sin = 0;
 800056a:	f04f 0300 	mov.w	r3, #0
 800056e:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 8000572:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000576:	6013      	str	r3, [r2, #0]

			if (sin_to_play < S_2000+1)
 8000578:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 800057c:	f103 031e 	add.w	r3, r3, #30
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000586:	d830      	bhi.n	80005ea <main+0x3ee>
			{
				sin = sin + sine2000[i_2000];
 8000588:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 800058c:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8000590:	881a      	ldrh	r2, [r3, #0]
 8000592:	f507 53db 	add.w	r3, r7, #7008	; 0x1b60
 8000596:	3b04      	subs	r3, #4
 8000598:	0092      	lsls	r2, r2, #2
 800059a:	4413      	add	r3, r2
 800059c:	edd3 7a00 	vldr	s15, [r3]
 80005a0:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80005a4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80005a8:	ed93 7a00 	vldr	s14, [r3]
 80005ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005b0:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80005b4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80005b8:	edc3 7a00 	vstr	s15, [r3]
				i_2000 = (i_2000+1)%S_2000;
 80005bc:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80005c0:	f103 0326 	add.w	r3, r3, #38	; 0x26
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a6c      	ldr	r2, [pc, #432]	; (800077c <main+0x580>)
 80005ca:	fb82 1203 	smull	r1, r2, r2, r3
 80005ce:	11d1      	asrs	r1, r2, #7
 80005d0:	17da      	asrs	r2, r3, #31
 80005d2:	1a8a      	subs	r2, r1, r2
 80005d4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80005d8:	fb01 f202 	mul.w	r2, r1, r2
 80005dc:	1a9a      	subs	r2, r3, r2
 80005de:	4613      	mov	r3, r2
 80005e0:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 80005e4:	f102 0226 	add.w	r2, r2, #38	; 0x26
 80005e8:	8013      	strh	r3, [r2, #0]

			}
			if (sin_to_play < S_1000+1)
 80005ea:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80005ee:	f103 031e 	add.w	r3, r3, #30
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005f8:	d830      	bhi.n	800065c <main+0x460>
			{
				sin = sin + sine1000[i_1000];
 80005fa:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80005fe:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000602:	881a      	ldrh	r2, [r3, #0]
 8000604:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8000608:	3b04      	subs	r3, #4
 800060a:	0092      	lsls	r2, r2, #2
 800060c:	4413      	add	r3, r2
 800060e:	edd3 7a00 	vldr	s15, [r3]
 8000612:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000616:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800061a:	ed93 7a00 	vldr	s14, [r3]
 800061e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000622:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000626:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800062a:	edc3 7a00 	vstr	s15, [r3]
				i_1000 = (i_1000+1)%S_1000;
 800062e:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000632:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	4a50      	ldr	r2, [pc, #320]	; (800077c <main+0x580>)
 800063c:	fb82 1203 	smull	r1, r2, r2, r3
 8000640:	1191      	asrs	r1, r2, #6
 8000642:	17da      	asrs	r2, r3, #31
 8000644:	1a8a      	subs	r2, r1, r2
 8000646:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800064a:	fb01 f202 	mul.w	r2, r1, r2
 800064e:	1a9a      	subs	r2, r3, r2
 8000650:	4613      	mov	r3, r2
 8000652:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 8000656:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800065a:	8013      	strh	r3, [r2, #0]

			}
			if (sin_to_play < S_500+1)
 800065c:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000660:	f103 031e 	add.w	r3, r3, #30
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800066a:	d830      	bhi.n	80006ce <main+0x4d2>
			{
				sin = sin + sine500[i_500];
 800066c:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000670:	f103 0322 	add.w	r3, r3, #34	; 0x22
 8000674:	881a      	ldrh	r2, [r3, #0]
 8000676:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800067a:	3b14      	subs	r3, #20
 800067c:	0092      	lsls	r2, r2, #2
 800067e:	4413      	add	r3, r2
 8000680:	edd3 7a00 	vldr	s15, [r3]
 8000684:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000688:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800068c:	ed93 7a00 	vldr	s14, [r3]
 8000690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000694:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000698:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800069c:	edc3 7a00 	vstr	s15, [r3]
				i_500 = (i_500+1)%S_500;
 80006a0:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80006a4:	f103 0322 	add.w	r3, r3, #34	; 0x22
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	4a33      	ldr	r2, [pc, #204]	; (800077c <main+0x580>)
 80006ae:	fb82 1203 	smull	r1, r2, r2, r3
 80006b2:	1151      	asrs	r1, r2, #5
 80006b4:	17da      	asrs	r2, r3, #31
 80006b6:	1a8a      	subs	r2, r1, r2
 80006b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006bc:	fb01 f202 	mul.w	r2, r1, r2
 80006c0:	1a9a      	subs	r2, r3, r2
 80006c2:	4613      	mov	r3, r2
 80006c4:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 80006c8:	f102 0222 	add.w	r2, r2, #34	; 0x22
 80006cc:	8013      	strh	r3, [r2, #0]

			}
			if (sin_to_play < S_250+1)
 80006ce:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80006d2:	f103 031e 	add.w	r3, r3, #30
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	2bfa      	cmp	r3, #250	; 0xfa
 80006da:	d82f      	bhi.n	800073c <main+0x540>
			{
				sin = sin + sine250[i_250];
 80006dc:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80006e0:	f103 0320 	add.w	r3, r3, #32
 80006e4:	881a      	ldrh	r2, [r3, #0]
 80006e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006ea:	3b3c      	subs	r3, #60	; 0x3c
 80006ec:	0092      	lsls	r2, r2, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	edd3 7a00 	vldr	s15, [r3]
 80006f4:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 80006f8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80006fc:	ed93 7a00 	vldr	s14, [r3]
 8000700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000704:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000708:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800070c:	edc3 7a00 	vstr	s15, [r3]
				i_250 = (i_250+1)%S_250;
 8000710:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000714:	f103 0320 	add.w	r3, r3, #32
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a17      	ldr	r2, [pc, #92]	; (800077c <main+0x580>)
 800071e:	fb82 1203 	smull	r1, r2, r2, r3
 8000722:	1111      	asrs	r1, r2, #4
 8000724:	17da      	asrs	r2, r3, #31
 8000726:	1a8a      	subs	r2, r1, r2
 8000728:	21fa      	movs	r1, #250	; 0xfa
 800072a:	fb01 f202 	mul.w	r2, r1, r2
 800072e:	1a9a      	subs	r2, r3, r2
 8000730:	4613      	mov	r3, r2
 8000732:	f507 526a 	add.w	r2, r7, #14976	; 0x3a80
 8000736:	f102 0220 	add.w	r2, r2, #32
 800073a:	8013      	strh	r3, [r2, #0]

			}

			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sin);
 800073c:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 8000740:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000744:	edd3 7a00 	vldr	s15, [r3]
 8000748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800074c:	ee17 3a90 	vmov	r3, s15
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	480a      	ldr	r0, [pc, #40]	; (8000780 <main+0x584>)
 8000756:	f001 fbb1 	bl	8001ebc <HAL_DAC_SetValue>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sin);
 800075a:	f507 536a 	add.w	r3, r7, #14976	; 0x3a80
 800075e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000762:	edd3 7a00 	vldr	s15, [r3]
 8000766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800076a:	ee17 3a90 	vmov	r3, s15
 800076e:	2200      	movs	r2, #0
 8000770:	2110      	movs	r1, #16
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <main+0x584>)
 8000774:	f001 fba2 	bl	8001ebc <HAL_DAC_SetValue>
		if(!HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin))
 8000778:	e67b      	b.n	8000472 <main+0x276>
 800077a:	bf00      	nop
 800077c:	10624dd3 	.word	0x10624dd3
 8000780:	20000028 	.word	0x20000028

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b0bc      	sub	sp, #240	; 0xf0
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800078e:	2244      	movs	r2, #68	; 0x44
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f003 fbc6 	bl	8003f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2294      	movs	r2, #148	; 0x94
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fbb8 	bl	8003f24 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80007b4:	2000      	movs	r0, #0
 80007b6:	f001 fee3 	bl	8002580 <HAL_PWREx_ControlVoltageScaling>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80007c0:	f000 f958 	bl	8000a74 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d2:	2340      	movs	r3, #64	; 0x40
 80007d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007de:	2302      	movs	r3, #2
 80007e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 30;
 80007ea:	231e      	movs	r3, #30
 80007ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000806:	4618      	mov	r0, r3
 8000808:	f001 ff5e 	bl	80026c8 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000812:	f000 f92f 	bl	8000a74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2303      	movs	r3, #3
 800081e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000834:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000838:	2105      	movs	r1, #5
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fb6a 	bl	8002f14 <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000846:	f000 f915 	bl	8000a74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800084a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800084e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000850:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4618      	mov	r0, r3
 800085c:	f002 fde0 	bl	8003420 <HAL_RCCEx_PeriphCLKConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000866:	f000 f905 	bl	8000a74 <Error_Handler>
  }
}
 800086a:	bf00      	nop
 800086c:	37f0      	adds	r7, #240	; 0xf0
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
 8000888:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_ADC1_Init+0xbc>)
 800088c:	4a29      	ldr	r2, [pc, #164]	; (8000934 <MX_ADC1_Init+0xc0>)
 800088e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_ADC1_Init+0xbc>)
 8000892:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000896:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <MX_ADC1_Init+0xbc>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008ac:	2204      	movs	r2, #4
 80008ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008b6:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008be:	2201      	movs	r2, #1
 80008c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ec:	4810      	ldr	r0, [pc, #64]	; (8000930 <MX_ADC1_Init+0xbc>)
 80008ee:	f000 fc2b 	bl	8001148 <HAL_ADC_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80008f8:	f000 f8bc 	bl	8000a74 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_ADC1_Init+0xc4>)
 80008fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000900:	2306      	movs	r3, #6
 8000902:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000908:	237f      	movs	r3, #127	; 0x7f
 800090a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090c:	2304      	movs	r3, #4
 800090e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000914:	463b      	mov	r3, r7
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_ADC1_Init+0xbc>)
 800091a:	f000 fd5f 	bl	80013dc <HAL_ADC_ConfigChannel>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000924:	f000 f8a6 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000003c 	.word	0x2000003c
 8000934:	50040000 	.word	0x50040000
 8000938:	80000001 	.word	0x80000001

0800093c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2228      	movs	r2, #40	; 0x28
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f003 faeb 	bl	8003f24 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_DAC1_Init+0x78>)
 8000950:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <MX_DAC1_Init+0x7c>)
 8000952:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000954:	4817      	ldr	r0, [pc, #92]	; (80009b4 <MX_DAC1_Init+0x78>)
 8000956:	f001 fa20 	bl	8001d9a <HAL_DAC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000960:	f000 f888 	bl	8000a74 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_DAC1_Init+0x78>)
 8000984:	f001 fac0 	bl	8001f08 <HAL_DAC_ConfigChannel>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800098e:	f000 f871 	bl	8000a74 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	2210      	movs	r2, #16
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_DAC1_Init+0x78>)
 800099e:	f001 fab3 	bl	8001f08 <HAL_DAC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 80009a8:	f000 f864 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000028 	.word	0x20000028
 80009b8:	40007400 	.word	0x40007400

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b088      	sub	sp, #32
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <MX_GPIO_Init+0xac>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a24      	ldr	r2, [pc, #144]	; (8000a68 <MX_GPIO_Init+0xac>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_GPIO_Init+0xac>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_GPIO_Init+0xac>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a1e      	ldr	r2, [pc, #120]	; (8000a68 <MX_GPIO_Init+0xac>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_GPIO_Init+0xac>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_GPIO_Init+0xac>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <MX_GPIO_Init+0xac>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_GPIO_Init+0xac>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a20:	4812      	ldr	r0, [pc, #72]	; (8000a6c <MX_GPIO_Init+0xb0>)
 8000a22:	f001 fd5b 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_BLUE_Pin */
  GPIO_InitStruct.Pin = BUTTON_BLUE_Pin;
 8000a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_BLUE_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_GPIO_Init+0xb4>)
 8000a3c:	f001 fba4 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_GPIO_Init+0xb0>)
 8000a5a:	f001 fb95 	bl	8002188 <HAL_GPIO_Init>

}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000400 	.word	0x48000400
 8000a70:	48000800 	.word	0x48000800

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <HAL_MspInit+0x44>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6613      	str	r3, [r2, #96]	; 0x60
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_MspInit+0x44>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x44>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x44>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a15      	ldr	r2, [pc, #84]	; (8000b3c <HAL_ADC_MspInit+0x74>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d123      	bne.n	8000b32 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_ADC_MspInit+0x78>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <HAL_ADC_MspInit+0x78>)
 8000af0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_ADC_MspInit+0x78>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_ADC_MspInit+0x78>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <HAL_ADC_MspInit+0x78>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_ADC_MspInit+0x78>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b1e:	230b      	movs	r3, #11
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <HAL_ADC_MspInit+0x7c>)
 8000b2e:	f001 fb2b 	bl	8002188 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3728      	adds	r7, #40	; 0x28
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	50040000 	.word	0x50040000
 8000b40:	40021000 	.word	0x40021000
 8000b44:	48000800 	.word	0x48000800

08000b48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a15      	ldr	r2, [pc, #84]	; (8000bbc <HAL_DAC_MspInit+0x74>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d124      	bne.n	8000bb4 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_DAC_MspInit+0x78>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <HAL_DAC_MspInit+0x78>)
 8000b70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_DAC_MspInit+0x78>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_DAC_MspInit+0x78>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_DAC_MspInit+0x78>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_DAC_MspInit+0x78>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b9a:	2330      	movs	r3, #48	; 0x30
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f001 faea 	bl	8002188 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40007400 	.word	0x40007400
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c10:	f000 f8b6 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <SystemInit+0x64>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <SystemInit+0x64>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <SystemInit+0x68>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <SystemInit+0x68>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <SystemInit+0x68>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <SystemInit+0x68>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a0f      	ldr	r2, [pc, #60]	; (8000c80 <SystemInit+0x68>)
 8000c44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <SystemInit+0x68>)
 8000c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <SystemInit+0x68>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <SystemInit+0x68>)
 8000c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <SystemInit+0x68>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SystemInit+0x64>)
 8000c6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c6e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00
 8000c80:	40021000 	.word	0x40021000

08000c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c88:	f7ff ffc6 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c8e:	e003      	b.n	8000c98 <LoopCopyDataInit>

08000c90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c96:	3104      	adds	r1, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c98:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ca0:	d3f6      	bcc.n	8000c90 <CopyDataInit>
	ldr	r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ca4:	e002      	b.n	8000cac <LoopFillZerobss>

08000ca6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ca6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ca8:	f842 3b04 	str.w	r3, [r2], #4

08000cac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <LoopForever+0x16>)
	cmp	r2, r3
 8000cae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cb0:	d3f9      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f003 f913 	bl	8003edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cb6:	f7ff faa1 	bl	80001fc <main>

08000cba <LoopForever>:

LoopForever:
    b LoopForever
 8000cba:	e7fe      	b.n	8000cba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cbc:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8000cc0:	08004798 	.word	0x08004798
	ldr	r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cc8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ccc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000cd0:	200000a8 	.word	0x200000a8

08000cd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC1_IRQHandler>

08000cd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f001 f827 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f80e 	bl	8000d08 <HAL_InitTick>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	71fb      	strb	r3, [r7, #7]
 8000cf6:	e001      	b.n	8000cfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf8:	f7ff fec2 	bl	8000a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <HAL_InitTick+0x6c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d023      	beq.n	8000d64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_InitTick+0x70>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b14      	ldr	r3, [pc, #80]	; (8000d74 <HAL_InitTick+0x6c>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 f825 	bl	8001d82 <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10f      	bne.n	8000d5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d809      	bhi.n	8000d58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d4c:	f000 fffd 	bl	8001d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_InitTick+0x74>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
 8000d56:	e007      	b.n	8000d68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e004      	b.n	8000d68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	e001      	b.n	8000d68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	200000a4 	.word	0x200000a4

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200000a4 	.word	0x200000a4

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_Delay+0x44>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008

08000e08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	609a      	str	r2, [r3, #8]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	609a      	str	r2, [r3, #8]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3360      	adds	r3, #96	; 0x60
 8000e82:	461a      	mov	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <LL_ADC_SetOffset+0x44>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000ea8:	bf00      	nop
 8000eaa:	371c      	adds	r7, #28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	03fff000 	.word	0x03fff000

08000eb8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3360      	adds	r3, #96	; 0x60
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3360      	adds	r3, #96	; 0x60
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f0e:	bf00      	nop
 8000f10:	371c      	adds	r7, #28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	615a      	str	r2, [r3, #20]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3330      	adds	r3, #48	; 0x30
 8000f50:	461a      	mov	r2, r3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	4413      	add	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	f003 031f 	and.w	r3, r3, #31
 8000f6a:	211f      	movs	r1, #31
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	401a      	ands	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	0e9b      	lsrs	r3, r3, #26
 8000f78:	f003 011f 	and.w	r1, r3, #31
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	f003 031f 	and.w	r3, r3, #31
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	431a      	orrs	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f8c:	bf00      	nop
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3314      	adds	r3, #20
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	0e5b      	lsrs	r3, r3, #25
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	4413      	add	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	0d1b      	lsrs	r3, r3, #20
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	401a      	ands	r2, r3
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	0d1b      	lsrs	r3, r3, #20
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fe2:	bf00      	nop
 8000fe4:	371c      	adds	r7, #28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001008:	43db      	mvns	r3, r3
 800100a:	401a      	ands	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0318 	and.w	r3, r3, #24
 8001012:	4908      	ldr	r1, [pc, #32]	; (8001034 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001014:	40d9      	lsrs	r1, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	400b      	ands	r3, r1
 800101a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800101e:	431a      	orrs	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0007ffff 	.word	0x0007ffff

08001038 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001048:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	6093      	str	r3, [r2, #8]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800106c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001070:	d101      	bne.n	8001076 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001094:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001098:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010c0:	d101      	bne.n	80010c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <LL_ADC_IsEnabled+0x18>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <LL_ADC_IsEnabled+0x1a>
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	2b04      	cmp	r3, #4
 800110c:	d101      	bne.n	8001112 <LL_ADC_REG_IsConversionOngoing+0x18>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	2b08      	cmp	r3, #8
 8001132:	d101      	bne.n	8001138 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e12d      	b.n	80013be <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116c:	2b00      	cmp	r3, #0
 800116e:	d109      	bne.n	8001184 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fca9 	bl	8000ac8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff67 	bl	800105c <LL_ADC_IsDeepPowerDownEnabled>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d004      	beq.n	800119e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff4d 	bl	8001038 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff82 	bl	80010ac <LL_ADC_IsInternalRegulatorEnabled>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d113      	bne.n	80011d6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff66 	bl	8001084 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80011b8:	4b83      	ldr	r3, [pc, #524]	; (80013c8 <HAL_ADC_Init+0x280>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	099b      	lsrs	r3, r3, #6
 80011be:	4a83      	ldr	r2, [pc, #524]	; (80013cc <HAL_ADC_Init+0x284>)
 80011c0:	fba2 2303 	umull	r2, r3, r2, r3
 80011c4:	099b      	lsrs	r3, r3, #6
 80011c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f9      	bne.n	80011ca <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff66 	bl	80010ac <LL_ADC_IsInternalRegulatorEnabled>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10d      	bne.n	8001202 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	f043 0210 	orr.w	r2, r3, #16
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f6:	f043 0201 	orr.w	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff77 	bl	80010fa <LL_ADC_REG_IsConversionOngoing>
 800120c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	2b00      	cmp	r3, #0
 8001218:	f040 80c8 	bne.w	80013ac <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	2b00      	cmp	r3, #0
 8001220:	f040 80c4 	bne.w	80013ac <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001228:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800122c:	f043 0202 	orr.w	r2, r3, #2
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff4b 	bl	80010d4 <LL_ADC_IsEnabled>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10b      	bne.n	800125c <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001244:	4862      	ldr	r0, [pc, #392]	; (80013d0 <HAL_ADC_Init+0x288>)
 8001246:	f7ff ff45 	bl	80010d4 <LL_ADC_IsEnabled>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4619      	mov	r1, r3
 8001256:	485f      	ldr	r0, [pc, #380]	; (80013d4 <HAL_ADC_Init+0x28c>)
 8001258:	f7ff fdd6 	bl	8000e08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7e5b      	ldrb	r3, [r3, #25]
 8001260:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001266:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800126c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001272:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d106      	bne.n	8001298 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	3b01      	subs	r3, #1
 8001290:	045b      	lsls	r3, r3, #17
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	2b00      	cmp	r3, #0
 800129e:	d009      	beq.n	80012b4 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <HAL_ADC_Init+0x290>)
 80012bc:	4013      	ands	r3, r2
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6812      	ldr	r2, [r2, #0]
 80012c2:	69b9      	ldr	r1, [r7, #24]
 80012c4:	430b      	orrs	r3, r1
 80012c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff14 	bl	80010fa <LL_ADC_REG_IsConversionOngoing>
 80012d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff21 	bl	8001120 <LL_ADC_INJ_IsConversionOngoing>
 80012de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d140      	bne.n	8001368 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d13d      	bne.n	8001368 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7e1b      	ldrb	r3, [r3, #24]
 80012f4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012f6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012fe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800130e:	f023 0306 	bic.w	r3, r3, #6
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	69b9      	ldr	r1, [r7, #24]
 8001318:	430b      	orrs	r3, r1
 800131a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001322:	2b01      	cmp	r3, #1
 8001324:	d118      	bne.n	8001358 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001330:	f023 0304 	bic.w	r3, r3, #4
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800133c:	4311      	orrs	r1, r2
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001342:	4311      	orrs	r1, r2
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001348:	430a      	orrs	r2, r1
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f042 0201 	orr.w	r2, r2, #1
 8001354:	611a      	str	r2, [r3, #16]
 8001356:	e007      	b.n	8001368 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	691a      	ldr	r2, [r3, #16]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0201 	bic.w	r2, r2, #1
 8001366:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d10c      	bne.n	800138a <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f023 010f 	bic.w	r1, r3, #15
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	1e5a      	subs	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	631a      	str	r2, [r3, #48]	; 0x30
 8001388:	e007      	b.n	800139a <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 020f 	bic.w	r2, r2, #15
 8001398:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	f023 0303 	bic.w	r3, r3, #3
 80013a2:	f043 0201 	orr.w	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	659a      	str	r2, [r3, #88]	; 0x58
 80013aa:	e007      	b.n	80013bc <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b0:	f043 0210 	orr.w	r2, r3, #16
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000000 	.word	0x20000000
 80013cc:	053e2d63 	.word	0x053e2d63
 80013d0:	50040000 	.word	0x50040000
 80013d4:	50040300 	.word	0x50040300
 80013d8:	fff0c007 	.word	0xfff0c007

080013dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0b6      	sub	sp, #216	; 0xd8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d101      	bne.n	80013fe <HAL_ADC_ConfigChannel+0x22>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e3d4      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x7cc>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fe75 	bl	80010fa <LL_ADC_REG_IsConversionOngoing>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	f040 83b9 	bne.w	8001b8a <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b05      	cmp	r3, #5
 800141e:	d824      	bhi.n	800146a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	3b02      	subs	r3, #2
 8001426:	2b03      	cmp	r3, #3
 8001428:	d81b      	bhi.n	8001462 <HAL_ADC_ConfigChannel+0x86>
 800142a:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <HAL_ADC_ConfigChannel+0x54>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001441 	.word	0x08001441
 8001434:	08001449 	.word	0x08001449
 8001438:	08001451 	.word	0x08001451
 800143c:	08001459 	.word	0x08001459
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	220c      	movs	r2, #12
 8001444:	605a      	str	r2, [r3, #4]
          break;
 8001446:	e011      	b.n	800146c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2212      	movs	r2, #18
 800144c:	605a      	str	r2, [r3, #4]
          break;
 800144e:	e00d      	b.n	800146c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2218      	movs	r2, #24
 8001454:	605a      	str	r2, [r3, #4]
          break;
 8001456:	e009      	b.n	800146c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800145e:	605a      	str	r2, [r3, #4]
          break;
 8001460:	e004      	b.n	800146c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2206      	movs	r2, #6
 8001466:	605a      	str	r2, [r3, #4]
          break;
 8001468:	e000      	b.n	800146c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800146a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	f7ff fd61 	bl	8000f40 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fe39 	bl	80010fa <LL_ADC_REG_IsConversionOngoing>
 8001488:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe45 	bl	8001120 <LL_ADC_INJ_IsConversionOngoing>
 8001496:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800149a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 81c1 	bne.w	8001826 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f040 81bc 	bne.w	8001826 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014b6:	d10f      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6818      	ldr	r0, [r3, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2200      	movs	r2, #0
 80014c2:	4619      	mov	r1, r3
 80014c4:	f7ff fd68 	bl	8000f98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fd22 	bl	8000f1a <LL_ADC_SetSamplingTimeCommonConfig>
 80014d6:	e00e      	b.n	80014f6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	6819      	ldr	r1, [r3, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	461a      	mov	r2, r3
 80014e6:	f7ff fd57 	bl	8000f98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fd12 	bl	8000f1a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	695a      	ldr	r2, [r3, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d00a      	beq.n	800152e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	6919      	ldr	r1, [r3, #16]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001528:	f7ff fca2 	bl	8000e70 <LL_ADC_SetOffset>
 800152c:	e17b      	b.n	8001826 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fcbf 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10a      	bne.n	800155a <HAL_ADC_ConfigChannel+0x17e>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fcb4 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	0e9b      	lsrs	r3, r3, #26
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	e01e      	b.n	8001598 <HAL_ADC_ConfigChannel+0x1bc>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fca9 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800157c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001580:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001588:	2320      	movs	r3, #32
 800158a:	e004      	b.n	8001596 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800158c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001590:	fab3 f383 	clz	r3, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d105      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x1d4>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0e9b      	lsrs	r3, r3, #26
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	e018      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x206>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015bc:	fa93 f3a3 	rbit	r3, r3
 80015c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80015c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80015cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80015d4:	2320      	movs	r3, #32
 80015d6:	e004      	b.n	80015e2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80015d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015dc:	fab3 f383 	clz	r3, r3
 80015e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d106      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fc78 	bl	8000ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fc5c 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10a      	bne.n	8001620 <HAL_ADC_ConfigChannel+0x244>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2101      	movs	r1, #1
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fc51 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	0e9b      	lsrs	r3, r3, #26
 800161a:	f003 021f 	and.w	r2, r3, #31
 800161e:	e01e      	b.n	800165e <HAL_ADC_ConfigChannel+0x282>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2101      	movs	r1, #1
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fc46 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800163e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800164e:	2320      	movs	r3, #32
 8001650:	e004      	b.n	800165c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001652:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001656:	fab3 f383 	clz	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001666:	2b00      	cmp	r3, #0
 8001668:	d105      	bne.n	8001676 <HAL_ADC_ConfigChannel+0x29a>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	0e9b      	lsrs	r3, r3, #26
 8001670:	f003 031f 	and.w	r3, r3, #31
 8001674:	e018      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x2cc>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800168a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800168e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001692:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800169a:	2320      	movs	r3, #32
 800169c:	e004      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800169e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d106      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2200      	movs	r2, #0
 80016b2:	2101      	movs	r1, #1
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fc15 	bl	8000ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2102      	movs	r1, #2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fbf9 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10a      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x30a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2102      	movs	r1, #2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fbee 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	0e9b      	lsrs	r3, r3, #26
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	e01e      	b.n	8001724 <HAL_ADC_ConfigChannel+0x348>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2102      	movs	r1, #2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fbe3 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016fc:	fa93 f3a3 	rbit	r3, r3
 8001700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001708:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800170c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001714:	2320      	movs	r3, #32
 8001716:	e004      	b.n	8001722 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001718:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800171c:	fab3 f383 	clz	r3, r3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172c:	2b00      	cmp	r3, #0
 800172e:	d105      	bne.n	800173c <HAL_ADC_ConfigChannel+0x360>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0e9b      	lsrs	r3, r3, #26
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	e016      	b.n	800176a <HAL_ADC_ConfigChannel+0x38e>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800174e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800175c:	2320      	movs	r3, #32
 800175e:	e004      	b.n	800176a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800176a:	429a      	cmp	r2, r3
 800176c:	d106      	bne.n	800177c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2200      	movs	r2, #0
 8001774:	2102      	movs	r1, #2
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fbb4 	bl	8000ee4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2103      	movs	r1, #3
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fb98 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10a      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x3cc>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2103      	movs	r1, #3
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fb8d 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	0e9b      	lsrs	r3, r3, #26
 80017a2:	f003 021f 	and.w	r2, r3, #31
 80017a6:	e017      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x3fc>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2103      	movs	r1, #3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fb82 	bl	8000eb8 <LL_ADC_GetOffsetChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80017c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017c2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80017c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80017ca:	2320      	movs	r3, #32
 80017cc:	e003      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80017ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x414>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0e9b      	lsrs	r3, r3, #26
 80017ea:	f003 031f 	and.w	r3, r3, #31
 80017ee:	e011      	b.n	8001814 <HAL_ADC_ConfigChannel+0x438>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80017fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001800:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001808:	2320      	movs	r3, #32
 800180a:	e003      	b.n	8001814 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800180c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800180e:	fab3 f383 	clz	r3, r3
 8001812:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001814:	429a      	cmp	r2, r3
 8001816:	d106      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	2103      	movs	r1, #3
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fb5f 	bl	8000ee4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc52 	bl	80010d4 <LL_ADC_IsEnabled>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 8140 	bne.w	8001ab8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6819      	ldr	r1, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	461a      	mov	r2, r3
 8001846:	f7ff fbd3 	bl	8000ff0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	4a8f      	ldr	r2, [pc, #572]	; (8001a8c <HAL_ADC_ConfigChannel+0x6b0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	f040 8131 	bne.w	8001ab8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10b      	bne.n	800187e <HAL_ADC_ConfigChannel+0x4a2>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	0e9b      	lsrs	r3, r3, #26
 800186c:	3301      	adds	r3, #1
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	2b09      	cmp	r3, #9
 8001874:	bf94      	ite	ls
 8001876:	2301      	movls	r3, #1
 8001878:	2300      	movhi	r3, #0
 800187a:	b2db      	uxtb	r3, r3
 800187c:	e019      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x4d6>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800188c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800188e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001896:	2320      	movs	r3, #32
 8001898:	e003      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800189a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800189c:	fab3 f383 	clz	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	3301      	adds	r3, #1
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	2b09      	cmp	r3, #9
 80018aa:	bf94      	ite	ls
 80018ac:	2301      	movls	r3, #1
 80018ae:	2300      	movhi	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d079      	beq.n	80019aa <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d107      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x4f6>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0e9b      	lsrs	r3, r3, #26
 80018c8:	3301      	adds	r3, #1
 80018ca:	069b      	lsls	r3, r3, #26
 80018cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018d0:	e015      	b.n	80018fe <HAL_ADC_ConfigChannel+0x522>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018da:	fa93 f3a3 	rbit	r3, r3
 80018de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80018e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80018e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80018ea:	2320      	movs	r3, #32
 80018ec:	e003      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80018ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	069b      	lsls	r3, r3, #26
 80018fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_ADC_ConfigChannel+0x542>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	0e9b      	lsrs	r3, r3, #26
 8001910:	3301      	adds	r3, #1
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	2101      	movs	r1, #1
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	e017      	b.n	800194e <HAL_ADC_ConfigChannel+0x572>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800192c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001936:	2320      	movs	r3, #32
 8001938:	e003      	b.n	8001942 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800193a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	3301      	adds	r3, #1
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	2101      	movs	r1, #1
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	ea42 0103 	orr.w	r1, r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10a      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x598>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	3301      	adds	r3, #1
 8001966:	f003 021f 	and.w	r2, r3, #31
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	051b      	lsls	r3, r3, #20
 8001972:	e018      	b.n	80019a6 <HAL_ADC_ConfigChannel+0x5ca>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800198c:	2320      	movs	r3, #32
 800198e:	e003      	b.n	8001998 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3301      	adds	r3, #1
 800199a:	f003 021f 	and.w	r2, r3, #31
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019a6:	430b      	orrs	r3, r1
 80019a8:	e081      	b.n	8001aae <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d107      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x5ea>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	0e9b      	lsrs	r3, r3, #26
 80019bc:	3301      	adds	r3, #1
 80019be:	069b      	lsls	r3, r3, #26
 80019c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019c4:	e015      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x616>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80019d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80019d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80019de:	2320      	movs	r3, #32
 80019e0:	e003      	b.n	80019ea <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80019e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e4:	fab3 f383 	clz	r3, r3
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	3301      	adds	r3, #1
 80019ec:	069b      	lsls	r3, r3, #26
 80019ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d109      	bne.n	8001a12 <HAL_ADC_ConfigChannel+0x636>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	0e9b      	lsrs	r3, r3, #26
 8001a04:	3301      	adds	r3, #1
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	e017      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x666>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	61fb      	str	r3, [r7, #28]
  return result;
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001a2a:	2320      	movs	r3, #32
 8001a2c:	e003      	b.n	8001a36 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	ea42 0103 	orr.w	r1, r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10d      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x692>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0e9b      	lsrs	r3, r3, #26
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f003 021f 	and.w	r2, r3, #31
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	3b1e      	subs	r3, #30
 8001a66:	051b      	lsls	r3, r3, #20
 8001a68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a6c:	e01e      	b.n	8001aac <HAL_ADC_ConfigChannel+0x6d0>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa93 f3a3 	rbit	r3, r3
 8001a7a:	613b      	str	r3, [r7, #16]
  return result;
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d104      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001a86:	2320      	movs	r3, #32
 8001a88:	e006      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x6bc>
 8001a8a:	bf00      	nop
 8001a8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f003 021f 	and.w	r2, r3, #31
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b1e      	subs	r3, #30
 8001aa6:	051b      	lsls	r3, r3, #20
 8001aa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aac:	430b      	orrs	r3, r1
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	6892      	ldr	r2, [r2, #8]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff fa70 	bl	8000f98 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b3c      	ldr	r3, [pc, #240]	; (8001bb0 <HAL_ADC_ConfigChannel+0x7d4>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d06b      	beq.n	8001b9c <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ac4:	483b      	ldr	r0, [pc, #236]	; (8001bb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001ac6:	f7ff f9c5 	bl	8000e54 <LL_ADC_GetCommonPathInternalCh>
 8001aca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a39      	ldr	r2, [pc, #228]	; (8001bb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d126      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001adc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d120      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a34      	ldr	r2, [pc, #208]	; (8001bbc <HAL_ADC_ConfigChannel+0x7e0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d156      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001af2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001af6:	4619      	mov	r1, r3
 8001af8:	482e      	ldr	r0, [pc, #184]	; (8001bb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001afa:	f7ff f998 	bl	8000e2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_ADC_ConfigChannel+0x7e4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	099b      	lsrs	r3, r3, #6
 8001b04:	4a2f      	ldr	r2, [pc, #188]	; (8001bc4 <HAL_ADC_ConfigChannel+0x7e8>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	099a      	lsrs	r2, r3, #6
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b16:	e002      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f9      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b24:	e03a      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a27      	ldr	r2, [pc, #156]	; (8001bc8 <HAL_ADC_ConfigChannel+0x7ec>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d113      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x77c>
 8001b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10d      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a1e      	ldr	r2, [pc, #120]	; (8001bbc <HAL_ADC_ConfigChannel+0x7e0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d12a      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4818      	ldr	r0, [pc, #96]	; (8001bb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b52:	f7ff f96c 	bl	8000e2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b56:	e021      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1b      	ldr	r2, [pc, #108]	; (8001bcc <HAL_ADC_ConfigChannel+0x7f0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d11c      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d116      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <HAL_ADC_ConfigChannel+0x7e0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d111      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b80:	4619      	mov	r1, r3
 8001b82:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b84:	f7ff f953 	bl	8000e2e <LL_ADC_SetCommonPathInternalCh>
 8001b88:	e008      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	f043 0220 	orr.w	r2, r3, #32
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001ba4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	37d8      	adds	r7, #216	; 0xd8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	80080000 	.word	0x80080000
 8001bb4:	50040300 	.word	0x50040300
 8001bb8:	c7520000 	.word	0xc7520000
 8001bbc:	50040000 	.word	0x50040000
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	053e2d63 	.word	0x053e2d63
 8001bc8:	cb840000 	.word	0xcb840000
 8001bcc:	80000001 	.word	0x80000001

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff47 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff5c 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8e 	bl	8001c88 <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffb0 	bl	8001cf0 <SysTick_Config>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e014      	b.n	8001dd6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d105      	bne.n	8001dc2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7fe fec3 	bl	8000b48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	795b      	ldrb	r3, [r3, #5]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_DAC_Start+0x16>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e040      	b.n	8001e76 <HAL_DAC_Start+0x98>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6819      	ldr	r1, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10f      	bne.n	8001e3e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d11d      	bne.n	8001e68 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	e014      	b.n	8001e68 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2102      	movs	r1, #2
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d107      	bne.n	8001e68 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0202 	orr.w	r2, r2, #2
 8001e66:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
 8001e8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6819      	ldr	r1, [r3, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2201      	movs	r2, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d105      	bne.n	8001ee6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	3308      	adds	r3, #8
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	e004      	b.n	8001ef0 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	3314      	adds	r3, #20
 8001eee:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	795b      	ldrb	r3, [r3, #5]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_DAC_ConfigChannel+0x1c>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e12a      	b.n	800217a <HAL_DAC_ConfigChannel+0x272>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d174      	bne.n	8002022 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001f38:	f7fe ff36 	bl	8000da8 <HAL_GetTick>
 8001f3c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d134      	bne.n	8001fae <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f44:	e011      	b.n	8001f6a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001f46:	f7fe ff2f 	bl	8000da8 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d90a      	bls.n	8001f6a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f043 0208 	orr.w	r2, r3, #8
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2203      	movs	r2, #3
 8001f64:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e107      	b.n	800217a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1e6      	bne.n	8001f46 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7fe ff21 	bl	8000dc0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	69d2      	ldr	r2, [r2, #28]
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
 8001f88:	e01e      	b.n	8001fc8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001f8a:	f7fe ff0d 	bl	8000da8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d90a      	bls.n	8001fae <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f043 0208 	orr.w	r2, r3, #8
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e0e5      	b.n	800217a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	dbe8      	blt.n	8001f8a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f7fe ff01 	bl	8000dc0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	69d2      	ldr	r2, [r2, #28]
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	ea02 0103 	and.w	r1, r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	409a      	lsls	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	21ff      	movs	r1, #255	; 0xff
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	ea02 0103 	and.w	r1, r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	409a      	lsls	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d11d      	bne.n	8002066 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002030:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	221f      	movs	r2, #31
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	4013      	ands	r3, r2
 8002044:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	4313      	orrs	r3, r2
 800205c:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2207      	movs	r2, #7
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	4013      	ands	r3, r2
 8002080:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	431a      	orrs	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6819      	ldr	r1, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	400a      	ands	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	f640 72fe 	movw	r2, #4094	; 0xffe
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800210a:	d104      	bne.n	8002116 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	e018      	b.n	8002148 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d104      	bne.n	8002128 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e00f      	b.n	8002148 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002128:	f001 f8ac 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 800212c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <HAL_DAC_ConfigChannel+0x27c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d904      	bls.n	8002140 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e003      	b.n	8002148 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002146:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	22c0      	movs	r2, #192	; 0xc0
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	400a      	ands	r2, r1
 800216a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	04c4b400 	.word	0x04c4b400

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b087      	sub	sp, #28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002196:	e166      	b.n	8002466 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8158 	beq.w	8002460 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d00b      	beq.n	80021d0 <HAL_GPIO_Init+0x48>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d007      	beq.n	80021d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c4:	2b11      	cmp	r3, #17
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b12      	cmp	r3, #18
 80021ce:	d130      	bne.n	8002232 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002206:	2201      	movs	r2, #1
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	f003 0201 	and.w	r2, r3, #1
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0xea>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b12      	cmp	r3, #18
 8002270:	d123      	bne.n	80022ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	08da      	lsrs	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3208      	adds	r2, #8
 80022b4:	6939      	ldr	r1, [r7, #16]
 80022b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0203 	and.w	r2, r3, #3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80b2 	beq.w	8002460 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fc:	4b61      	ldr	r3, [pc, #388]	; (8002484 <HAL_GPIO_Init+0x2fc>)
 80022fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002300:	4a60      	ldr	r2, [pc, #384]	; (8002484 <HAL_GPIO_Init+0x2fc>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6613      	str	r3, [r2, #96]	; 0x60
 8002308:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <HAL_GPIO_Init+0x2fc>)
 800230a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002314:	4a5c      	ldr	r2, [pc, #368]	; (8002488 <HAL_GPIO_Init+0x300>)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800233e:	d02b      	beq.n	8002398 <HAL_GPIO_Init+0x210>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a52      	ldr	r2, [pc, #328]	; (800248c <HAL_GPIO_Init+0x304>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d025      	beq.n	8002394 <HAL_GPIO_Init+0x20c>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a51      	ldr	r2, [pc, #324]	; (8002490 <HAL_GPIO_Init+0x308>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d01f      	beq.n	8002390 <HAL_GPIO_Init+0x208>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a50      	ldr	r2, [pc, #320]	; (8002494 <HAL_GPIO_Init+0x30c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d019      	beq.n	800238c <HAL_GPIO_Init+0x204>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a4f      	ldr	r2, [pc, #316]	; (8002498 <HAL_GPIO_Init+0x310>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <HAL_GPIO_Init+0x200>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a4e      	ldr	r2, [pc, #312]	; (800249c <HAL_GPIO_Init+0x314>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00d      	beq.n	8002384 <HAL_GPIO_Init+0x1fc>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a4d      	ldr	r2, [pc, #308]	; (80024a0 <HAL_GPIO_Init+0x318>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d007      	beq.n	8002380 <HAL_GPIO_Init+0x1f8>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <HAL_GPIO_Init+0x31c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_GPIO_Init+0x1f4>
 8002378:	2307      	movs	r3, #7
 800237a:	e00e      	b.n	800239a <HAL_GPIO_Init+0x212>
 800237c:	2308      	movs	r3, #8
 800237e:	e00c      	b.n	800239a <HAL_GPIO_Init+0x212>
 8002380:	2306      	movs	r3, #6
 8002382:	e00a      	b.n	800239a <HAL_GPIO_Init+0x212>
 8002384:	2305      	movs	r3, #5
 8002386:	e008      	b.n	800239a <HAL_GPIO_Init+0x212>
 8002388:	2304      	movs	r3, #4
 800238a:	e006      	b.n	800239a <HAL_GPIO_Init+0x212>
 800238c:	2303      	movs	r3, #3
 800238e:	e004      	b.n	800239a <HAL_GPIO_Init+0x212>
 8002390:	2302      	movs	r3, #2
 8002392:	e002      	b.n	800239a <HAL_GPIO_Init+0x212>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_GPIO_Init+0x212>
 8002398:	2300      	movs	r3, #0
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	f002 0203 	and.w	r2, r2, #3
 80023a0:	0092      	lsls	r2, r2, #2
 80023a2:	4093      	lsls	r3, r2
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023aa:	4937      	ldr	r1, [pc, #220]	; (8002488 <HAL_GPIO_Init+0x300>)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023b8:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_GPIO_Init+0x320>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023dc:	4a32      	ldr	r2, [pc, #200]	; (80024a8 <HAL_GPIO_Init+0x320>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80023e2:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <HAL_GPIO_Init+0x320>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002406:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <HAL_GPIO_Init+0x320>)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800240c:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <HAL_GPIO_Init+0x320>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002430:	4a1d      	ldr	r2, [pc, #116]	; (80024a8 <HAL_GPIO_Init+0x320>)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002436:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <HAL_GPIO_Init+0x320>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800245a:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <HAL_GPIO_Init+0x320>)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	3301      	adds	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	f47f ae91 	bne.w	8002198 <HAL_GPIO_Init+0x10>
  }
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40021000 	.word	0x40021000
 8002488:	40010000 	.word	0x40010000
 800248c:	48000400 	.word	0x48000400
 8002490:	48000800 	.word	0x48000800
 8002494:	48000c00 	.word	0x48000c00
 8002498:	48001000 	.word	0x48001000
 800249c:	48001400 	.word	0x48001400
 80024a0:	48001800 	.word	0x48001800
 80024a4:	48001c00 	.word	0x48001c00
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	887b      	ldrh	r3, [r7, #2]
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e001      	b.n	80024ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
 80024e8:	4613      	mov	r3, r2
 80024ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024ec:	787b      	ldrb	r3, [r7, #1]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024f8:	e002      	b.n	8002500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4013      	ands	r3, r2
 8002524:	041a      	lsls	r2, r3, #16
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43d9      	mvns	r1, r3
 800252a:	887b      	ldrh	r3, [r7, #2]
 800252c:	400b      	ands	r3, r1
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800254c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002550:	d102      	bne.n	8002558 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002556:	e00b      	b.n	8002570 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002558:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_PWREx_GetVoltageRange+0x3c>)
 800255a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002566:	d102      	bne.n	800256e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800256c:	e000      	b.n	8002570 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800256e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40007000 	.word	0x40007000

08002580 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d141      	bne.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800258e:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259a:	d131      	bne.n	8002600 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800259c:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a2:	4a46      	ldr	r2, [pc, #280]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ac:	4b43      	ldr	r3, [pc, #268]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025b4:	4a41      	ldr	r2, [pc, #260]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80025bc:	4b40      	ldr	r3, [pc, #256]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2232      	movs	r2, #50	; 0x32
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	4a3f      	ldr	r2, [pc, #252]	; (80026c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	0c9b      	lsrs	r3, r3, #18
 80025ce:	3301      	adds	r3, #1
 80025d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025d2:	e002      	b.n	80025da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025da:	4b38      	ldr	r3, [pc, #224]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e6:	d102      	bne.n	80025ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f2      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fa:	d158      	bne.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e057      	b.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002600:	4b2e      	ldr	r3, [pc, #184]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002606:	4a2d      	ldr	r2, [pc, #180]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800260c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002610:	e04d      	b.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002618:	d141      	bne.n	800269e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800261a:	4b28      	ldr	r3, [pc, #160]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002626:	d131      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002628:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800262a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800262e:	4a23      	ldr	r2, [pc, #140]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002634:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002638:	4b20      	ldr	r3, [pc, #128]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002640:	4a1e      	ldr	r2, [pc, #120]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002646:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002648:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2232      	movs	r2, #50	; 0x32
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	0c9b      	lsrs	r3, r3, #18
 800265a:	3301      	adds	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800265e:	e002      	b.n	8002666 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3b01      	subs	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002672:	d102      	bne.n	800267a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f2      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002686:	d112      	bne.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e011      	b.n	80026b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800268e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800269c:	e007      	b.n	80026ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800269e:	4b07      	ldr	r3, [pc, #28]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026a6:	4a05      	ldr	r2, [pc, #20]	; (80026bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40007000 	.word	0x40007000
 80026c0:	20000000 	.word	0x20000000
 80026c4:	431bde83 	.word	0x431bde83

080026c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f000 bc16 	b.w	8002f08 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026dc:	4ba0      	ldr	r3, [pc, #640]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e6:	4b9e      	ldr	r3, [pc, #632]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80e4 	beq.w	80028c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <HAL_RCC_OscConfig+0x4c>
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b0c      	cmp	r3, #12
 8002708:	f040 808b 	bne.w	8002822 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b01      	cmp	r3, #1
 8002710:	f040 8087 	bne.w	8002822 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002714:	4b92      	ldr	r3, [pc, #584]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_OscConfig+0x64>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e3ed      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1a      	ldr	r2, [r3, #32]
 8002730:	4b8b      	ldr	r3, [pc, #556]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d004      	beq.n	8002746 <HAL_RCC_OscConfig+0x7e>
 800273c:	4b88      	ldr	r3, [pc, #544]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002744:	e005      	b.n	8002752 <HAL_RCC_OscConfig+0x8a>
 8002746:	4b86      	ldr	r3, [pc, #536]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002752:	4293      	cmp	r3, r2
 8002754:	d223      	bcs.n	800279e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fd9e 	bl	800329c <RCC_SetFlashLatencyFromMSIRange>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e3ce      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800276a:	4b7d      	ldr	r3, [pc, #500]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a7c      	ldr	r2, [pc, #496]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002770:	f043 0308 	orr.w	r3, r3, #8
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b7a      	ldr	r3, [pc, #488]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4977      	ldr	r1, [pc, #476]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002784:	4313      	orrs	r3, r2
 8002786:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002788:	4b75      	ldr	r3, [pc, #468]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	4972      	ldr	r1, [pc, #456]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002798:	4313      	orrs	r3, r2
 800279a:	604b      	str	r3, [r1, #4]
 800279c:	e025      	b.n	80027ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800279e:	4b70      	ldr	r3, [pc, #448]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6f      	ldr	r2, [pc, #444]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 80027a4:	f043 0308 	orr.w	r3, r3, #8
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b6d      	ldr	r3, [pc, #436]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	496a      	ldr	r1, [pc, #424]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027bc:	4b68      	ldr	r3, [pc, #416]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	4965      	ldr	r1, [pc, #404]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fd5e 	bl	800329c <RCC_SetFlashLatencyFromMSIRange>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e38e      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027ea:	f000 fcbf 	bl	800316c <HAL_RCC_GetSysClockFreq>
 80027ee:	4602      	mov	r2, r0
 80027f0:	4b5b      	ldr	r3, [pc, #364]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	495a      	ldr	r1, [pc, #360]	; (8002964 <HAL_RCC_OscConfig+0x29c>)
 80027fc:	5ccb      	ldrb	r3, [r1, r3]
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	fa22 f303 	lsr.w	r3, r2, r3
 8002806:	4a58      	ldr	r2, [pc, #352]	; (8002968 <HAL_RCC_OscConfig+0x2a0>)
 8002808:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800280a:	4b58      	ldr	r3, [pc, #352]	; (800296c <HAL_RCC_OscConfig+0x2a4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fa7a 	bl	8000d08 <HAL_InitTick>
 8002814:	4603      	mov	r3, r0
 8002816:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d052      	beq.n	80028c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	e372      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d032      	beq.n	8002890 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800282a:	4b4d      	ldr	r3, [pc, #308]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a4c      	ldr	r2, [pc, #304]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002836:	f7fe fab7 	bl	8000da8 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800283e:	f7fe fab3 	bl	8000da8 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e35b      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002850:	4b43      	ldr	r3, [pc, #268]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800285c:	4b40      	ldr	r3, [pc, #256]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3f      	ldr	r2, [pc, #252]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b3d      	ldr	r3, [pc, #244]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	493a      	ldr	r1, [pc, #232]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800287a:	4b39      	ldr	r3, [pc, #228]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	4935      	ldr	r1, [pc, #212]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
 800288e:	e01a      	b.n	80028c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002890:	4b33      	ldr	r3, [pc, #204]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a32      	ldr	r2, [pc, #200]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800289c:	f7fe fa84 	bl	8000da8 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028a4:	f7fe fa80 	bl	8000da8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e328      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x1dc>
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d073      	beq.n	80029ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d005      	beq.n	80028e4 <HAL_RCC_OscConfig+0x21c>
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d10e      	bne.n	80028fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d10b      	bne.n	80028fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d063      	beq.n	80029b8 <HAL_RCC_OscConfig+0x2f0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d15f      	bne.n	80029b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e305      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002904:	d106      	bne.n	8002914 <HAL_RCC_OscConfig+0x24c>
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a15      	ldr	r2, [pc, #84]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e01d      	b.n	8002950 <HAL_RCC_OscConfig+0x288>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x270>
 800291e:	4b10      	ldr	r3, [pc, #64]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0x288>
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a08      	ldr	r2, [pc, #32]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800293e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a05      	ldr	r2, [pc, #20]	; (8002960 <HAL_RCC_OscConfig+0x298>)
 800294a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01b      	beq.n	8002990 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fa26 	bl	8000da8 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295e:	e010      	b.n	8002982 <HAL_RCC_OscConfig+0x2ba>
 8002960:	40021000 	.word	0x40021000
 8002964:	08003f4c 	.word	0x08003f4c
 8002968:	20000000 	.word	0x20000000
 800296c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002970:	f7fe fa1a 	bl	8000da8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e2c2      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002982:	4baf      	ldr	r3, [pc, #700]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x2a8>
 800298e:	e014      	b.n	80029ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fa0a 	bl	8000da8 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002998:	f7fe fa06 	bl	8000da8 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b64      	cmp	r3, #100	; 0x64
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e2ae      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029aa:	4ba5      	ldr	r3, [pc, #660]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x2d0>
 80029b6:	e000      	b.n	80029ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d060      	beq.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d005      	beq.n	80029d8 <HAL_RCC_OscConfig+0x310>
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b0c      	cmp	r3, #12
 80029d0:	d119      	bne.n	8002a06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d116      	bne.n	8002a06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029d8:	4b99      	ldr	r3, [pc, #612]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_OscConfig+0x328>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e28b      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b93      	ldr	r3, [pc, #588]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	4990      	ldr	r1, [pc, #576]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a04:	e040      	b.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d023      	beq.n	8002a56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a0e:	4b8c      	ldr	r3, [pc, #560]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a8b      	ldr	r2, [pc, #556]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7fe f9c5 	bl	8000da8 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a22:	f7fe f9c1 	bl	8000da8 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e269      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a34:	4b82      	ldr	r3, [pc, #520]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a40:	4b7f      	ldr	r3, [pc, #508]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	497c      	ldr	r1, [pc, #496]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
 8002a54:	e018      	b.n	8002a88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a56:	4b7a      	ldr	r3, [pc, #488]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a79      	ldr	r2, [pc, #484]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a62:	f7fe f9a1 	bl	8000da8 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6a:	f7fe f99d 	bl	8000da8 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e245      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a7c:	4b70      	ldr	r3, [pc, #448]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1f0      	bne.n	8002a6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d03c      	beq.n	8002b0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01c      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9c:	4b68      	ldr	r3, [pc, #416]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa2:	4a67      	ldr	r2, [pc, #412]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7fe f97c 	bl	8000da8 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab4:	f7fe f978 	bl	8000da8 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e220      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ac6:	4b5e      	ldr	r3, [pc, #376]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ef      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x3ec>
 8002ad4:	e01b      	b.n	8002b0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad6:	4b5a      	ldr	r3, [pc, #360]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002adc:	4a58      	ldr	r2, [pc, #352]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae6:	f7fe f95f 	bl	8000da8 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aee:	f7fe f95b 	bl	8000da8 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e203      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b00:	4b4f      	ldr	r3, [pc, #316]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1ef      	bne.n	8002aee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80a6 	beq.w	8002c68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b20:	4b47      	ldr	r3, [pc, #284]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10d      	bne.n	8002b48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2c:	4b44      	ldr	r3, [pc, #272]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	4a43      	ldr	r2, [pc, #268]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6593      	str	r3, [r2, #88]	; 0x58
 8002b38:	4b41      	ldr	r3, [pc, #260]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b44:	2301      	movs	r3, #1
 8002b46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b48:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <HAL_RCC_OscConfig+0x57c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d118      	bne.n	8002b86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b54:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <HAL_RCC_OscConfig+0x57c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a3a      	ldr	r2, [pc, #232]	; (8002c44 <HAL_RCC_OscConfig+0x57c>)
 8002b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b60:	f7fe f922 	bl	8000da8 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b68:	f7fe f91e 	bl	8000da8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e1c6      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b7a:	4b32      	ldr	r3, [pc, #200]	; (8002c44 <HAL_RCC_OscConfig+0x57c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d108      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4d8>
 8002b8e:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	4a2a      	ldr	r2, [pc, #168]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b9e:	e024      	b.n	8002bea <HAL_RCC_OscConfig+0x522>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b05      	cmp	r3, #5
 8002ba6:	d110      	bne.n	8002bca <HAL_RCC_OscConfig+0x502>
 8002ba8:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	4a20      	ldr	r2, [pc, #128]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc8:	e00f      	b.n	8002bea <HAL_RCC_OscConfig+0x522>
 8002bca:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002bd2:	f023 0301 	bic.w	r3, r3, #1
 8002bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be0:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002be2:	f023 0304 	bic.w	r3, r3, #4
 8002be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d016      	beq.n	8002c20 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf2:	f7fe f8d9 	bl	8000da8 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fe f8d5 	bl	8000da8 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e17b      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_OscConfig+0x578>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0ed      	beq.n	8002bfa <HAL_RCC_OscConfig+0x532>
 8002c1e:	e01a      	b.n	8002c56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe f8c2 	bl	8000da8 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c26:	e00f      	b.n	8002c48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7fe f8be 	bl	8000da8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d906      	bls.n	8002c48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e164      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c48:	4ba8      	ldr	r3, [pc, #672]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e8      	bne.n	8002c28 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c56:	7ffb      	ldrb	r3, [r7, #31]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c5c:	4ba3      	ldr	r3, [pc, #652]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	4aa2      	ldr	r2, [pc, #648]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0320 	and.w	r3, r3, #32
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d03c      	beq.n	8002cee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01c      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c7c:	4b9b      	ldr	r3, [pc, #620]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c82:	4a9a      	ldr	r2, [pc, #616]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe f88c 	bl	8000da8 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c94:	f7fe f888 	bl	8000da8 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e130      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ca6:	4b91      	ldr	r3, [pc, #580]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ef      	beq.n	8002c94 <HAL_RCC_OscConfig+0x5cc>
 8002cb4:	e01b      	b.n	8002cee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cb6:	4b8d      	ldr	r3, [pc, #564]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cbc:	4a8b      	ldr	r2, [pc, #556]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fe f86f 	bl	8000da8 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cce:	f7fe f86b 	bl	8000da8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e113      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ce0:	4b82      	ldr	r3, [pc, #520]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1ef      	bne.n	8002cce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 8107 	beq.w	8002f06 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	f040 80cb 	bne.w	8002e98 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d02:	4b7a      	ldr	r3, [pc, #488]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f003 0203 	and.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d12c      	bne.n	8002d70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	3b01      	subs	r3, #1
 8002d22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d123      	bne.n	8002d70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d11b      	bne.n	8002d70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d113      	bne.n	8002d70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	3b01      	subs	r3, #1
 8002d56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d109      	bne.n	8002d70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d06d      	beq.n	8002e4c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d068      	beq.n	8002e48 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d76:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d105      	bne.n	8002d8e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d82:	4b5a      	ldr	r3, [pc, #360]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0ba      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d92:	4b56      	ldr	r3, [pc, #344]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a55      	ldr	r2, [pc, #340]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002d98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d9c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d9e:	f7fe f803 	bl	8000da8 <HAL_GetTick>
 8002da2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da4:	e008      	b.n	8002db8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da6:	f7fd ffff 	bl	8000da8 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0a7      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002db8:	4b4c      	ldr	r3, [pc, #304]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1f0      	bne.n	8002da6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc4:	4b49      	ldr	r3, [pc, #292]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <HAL_RCC_OscConfig+0x828>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dd4:	3a01      	subs	r2, #1
 8002dd6:	0112      	lsls	r2, r2, #4
 8002dd8:	4311      	orrs	r1, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dde:	0212      	lsls	r2, r2, #8
 8002de0:	4311      	orrs	r1, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002de6:	0852      	lsrs	r2, r2, #1
 8002de8:	3a01      	subs	r2, #1
 8002dea:	0552      	lsls	r2, r2, #21
 8002dec:	4311      	orrs	r1, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002df2:	0852      	lsrs	r2, r2, #1
 8002df4:	3a01      	subs	r2, #1
 8002df6:	0652      	lsls	r2, r2, #25
 8002df8:	4311      	orrs	r1, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dfe:	06d2      	lsls	r2, r2, #27
 8002e00:	430a      	orrs	r2, r1
 8002e02:	493a      	ldr	r1, [pc, #232]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e08:	4b38      	ldr	r3, [pc, #224]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a37      	ldr	r2, [pc, #220]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e14:	4b35      	ldr	r3, [pc, #212]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a34      	ldr	r2, [pc, #208]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e20:	f7fd ffc2 	bl	8000da8 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fd ffbe 	bl	8000da8 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e066      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3a:	4b2c      	ldr	r3, [pc, #176]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e46:	e05e      	b.n	8002f06 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e05d      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4c:	4b27      	ldr	r3, [pc, #156]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d156      	bne.n	8002f06 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e64:	4b21      	ldr	r3, [pc, #132]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a20      	ldr	r2, [pc, #128]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e70:	f7fd ff9a 	bl	8000da8 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fd ff96 	bl	8000da8 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e03e      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8a:	4b18      	ldr	r3, [pc, #96]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x7b0>
 8002e96:	e036      	b.n	8002f06 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	d031      	beq.n	8002f02 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a12      	ldr	r2, [pc, #72]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002eaa:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eb6:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002ebc:	f023 0303 	bic.w	r3, r3, #3
 8002ec0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	4a09      	ldr	r2, [pc, #36]	; (8002eec <HAL_RCC_OscConfig+0x824>)
 8002ec8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fd ff69 	bl	8000da8 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed8:	e00c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fd ff65 	bl	8000da8 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d905      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e00d      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_RCC_OscConfig+0x848>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ec      	bne.n	8002eda <HAL_RCC_OscConfig+0x812>
 8002f00:	e001      	b.n	8002f06 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3720      	adds	r7, #32
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000

08002f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e10f      	b.n	800314c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b89      	ldr	r3, [pc, #548]	; (8003154 <HAL_RCC_ClockConfig+0x240>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d910      	bls.n	8002f5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b86      	ldr	r3, [pc, #536]	; (8003154 <HAL_RCC_ClockConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 020f 	bic.w	r2, r3, #15
 8002f42:	4984      	ldr	r1, [pc, #528]	; (8003154 <HAL_RCC_ClockConfig+0x240>)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b82      	ldr	r3, [pc, #520]	; (8003154 <HAL_RCC_ClockConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0f7      	b.n	800314c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8089 	beq.w	800307c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d133      	bne.n	8002fda <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f72:	4b79      	ldr	r3, [pc, #484]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e0e4      	b.n	800314c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002f82:	f000 f9e5 	bl	8003350 <RCC_GetSysClockFreqFromPLLSource>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4a74      	ldr	r2, [pc, #464]	; (800315c <HAL_RCC_ClockConfig+0x248>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d955      	bls.n	800303a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002f8e:	4b72      	ldr	r3, [pc, #456]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f9a:	4b6f      	ldr	r3, [pc, #444]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fa2:	4a6d      	ldr	r2, [pc, #436]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	e044      	b.n	800303a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d03e      	beq.n	800303a <HAL_RCC_ClockConfig+0x126>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d13a      	bne.n	800303a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fc4:	4b64      	ldr	r3, [pc, #400]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fcc:	4a62      	ldr	r2, [pc, #392]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	e02f      	b.n	800303a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fe2:	4b5d      	ldr	r3, [pc, #372]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d115      	bne.n	800301a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0ac      	b.n	800314c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ffa:	4b57      	ldr	r3, [pc, #348]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0a0      	b.n	800314c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800300a:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e098      	b.n	800314c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800301a:	f000 f8a7 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800301e:	4603      	mov	r3, r0
 8003020:	4a4e      	ldr	r2, [pc, #312]	; (800315c <HAL_RCC_ClockConfig+0x248>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d909      	bls.n	800303a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003026:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800302e:	4a4a      	ldr	r2, [pc, #296]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003034:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800303a:	4b47      	ldr	r3, [pc, #284]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f023 0203 	bic.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4944      	ldr	r1, [pc, #272]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003048:	4313      	orrs	r3, r2
 800304a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304c:	f7fd feac 	bl	8000da8 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	e00a      	b.n	800306a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003054:	f7fd fea8 	bl	8000da8 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e070      	b.n	800314c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	4b3b      	ldr	r3, [pc, #236]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 020c 	and.w	r2, r3, #12
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	429a      	cmp	r2, r3
 800307a:	d1eb      	bne.n	8003054 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d009      	beq.n	800309c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003088:	4b33      	ldr	r3, [pc, #204]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4930      	ldr	r1, [pc, #192]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
 800309a:	e008      	b.n	80030ae <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2b80      	cmp	r3, #128	; 0x80
 80030a0:	d105      	bne.n	80030ae <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030a2:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	4a2c      	ldr	r2, [pc, #176]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 80030a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ac:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ae:	4b29      	ldr	r3, [pc, #164]	; (8003154 <HAL_RCC_ClockConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d210      	bcs.n	80030de <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030bc:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_RCC_ClockConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 020f 	bic.w	r2, r3, #15
 80030c4:	4923      	ldr	r1, [pc, #140]	; (8003154 <HAL_RCC_ClockConfig+0x240>)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030cc:	4b21      	ldr	r3, [pc, #132]	; (8003154 <HAL_RCC_ClockConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d001      	beq.n	80030de <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e036      	b.n	800314c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d008      	beq.n	80030fc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ea:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	4918      	ldr	r1, [pc, #96]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b00      	cmp	r3, #0
 8003106:	d009      	beq.n	800311c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4910      	ldr	r1, [pc, #64]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003118:	4313      	orrs	r3, r2
 800311a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800311c:	f000 f826 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8003120:	4602      	mov	r2, r0
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	490c      	ldr	r1, [pc, #48]	; (8003160 <HAL_RCC_ClockConfig+0x24c>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_RCC_ClockConfig+0x250>)
 800313a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_RCC_ClockConfig+0x254>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd fde1 	bl	8000d08 <HAL_InitTick>
 8003146:	4603      	mov	r3, r0
 8003148:	73fb      	strb	r3, [r7, #15]

  return status;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40022000 	.word	0x40022000
 8003158:	40021000 	.word	0x40021000
 800315c:	04c4b400 	.word	0x04c4b400
 8003160:	08003f4c 	.word	0x08003f4c
 8003164:	20000000 	.word	0x20000000
 8003168:	20000004 	.word	0x20000004

0800316c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317a:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003184:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d121      	bne.n	80031de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d11e      	bne.n	80031de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031a0:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031ac:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	e005      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031bc:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031c8:	4a2b      	ldr	r2, [pc, #172]	; (8003278 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10d      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d102      	bne.n	80031ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <HAL_RCC_GetSysClockFreq+0x110>)
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	e004      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031f0:	4b23      	ldr	r3, [pc, #140]	; (8003280 <HAL_RCC_GetSysClockFreq+0x114>)
 80031f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d134      	bne.n	8003264 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d003      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0xa6>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d003      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0xac>
 8003210:	e005      	b.n	800321e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_RCC_GetSysClockFreq+0x110>)
 8003214:	617b      	str	r3, [r7, #20]
      break;
 8003216:	e005      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_GetSysClockFreq+0x114>)
 800321a:	617b      	str	r3, [r7, #20]
      break;
 800321c:	e002      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	617b      	str	r3, [r7, #20]
      break;
 8003222:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	3301      	adds	r3, #1
 8003230:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003232:	4b10      	ldr	r3, [pc, #64]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	fb02 f203 	mul.w	r2, r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	0e5b      	lsrs	r3, r3, #25
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	3301      	adds	r3, #1
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003264:	69bb      	ldr	r3, [r7, #24]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	08003f5c 	.word	0x08003f5c
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200

08003284 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_RCC_GetHCLKFreq+0x14>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000

0800329c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032a8:	4b27      	ldr	r3, [pc, #156]	; (8003348 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032b4:	f7ff f944 	bl	8002540 <HAL_PWREx_GetVoltageRange>
 80032b8:	6178      	str	r0, [r7, #20]
 80032ba:	e014      	b.n	80032e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c0:	4a21      	ldr	r2, [pc, #132]	; (8003348 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c6:	6593      	str	r3, [r2, #88]	; 0x58
 80032c8:	4b1f      	ldr	r3, [pc, #124]	; (8003348 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032d4:	f7ff f934 	bl	8002540 <HAL_PWREx_GetVoltageRange>
 80032d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032da:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	4a1a      	ldr	r2, [pc, #104]	; (8003348 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80032e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ec:	d10b      	bne.n	8003306 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b80      	cmp	r3, #128	; 0x80
 80032f2:	d913      	bls.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2ba0      	cmp	r3, #160	; 0xa0
 80032f8:	d902      	bls.n	8003300 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032fa:	2302      	movs	r3, #2
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	e00d      	b.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003300:	2301      	movs	r3, #1
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	e00a      	b.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b7f      	cmp	r3, #127	; 0x7f
 800330a:	d902      	bls.n	8003312 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800330c:	2302      	movs	r3, #2
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	e004      	b.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b70      	cmp	r3, #112	; 0x70
 8003316:	d101      	bne.n	800331c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003318:	2301      	movs	r3, #1
 800331a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 020f 	bic.w	r2, r3, #15
 8003324:	4909      	ldr	r1, [pc, #36]	; (800334c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800332c:	4b07      	ldr	r3, [pc, #28]	; (800334c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	429a      	cmp	r2, r3
 8003338:	d001      	beq.n	800333e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e000      	b.n	8003340 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021000 	.word	0x40021000
 800334c:	40022000 	.word	0x40022000

08003350 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800335a:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d118      	bne.n	8003398 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003366:	4b2a      	ldr	r3, [pc, #168]	; (8003410 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d107      	bne.n	8003382 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003372:	4b27      	ldr	r3, [pc, #156]	; (8003410 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003374:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003378:	0a1b      	lsrs	r3, r3, #8
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	e005      	b.n	800338e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003382:	4b23      	ldr	r3, [pc, #140]	; (8003410 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	091b      	lsrs	r3, r3, #4
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800338e:	4a21      	ldr	r2, [pc, #132]	; (8003414 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003396:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003398:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d003      	beq.n	80033b0 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d003      	beq.n	80033b6 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80033ae:	e005      	b.n	80033bc <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80033b2:	613b      	str	r3, [r7, #16]
    break;
 80033b4:	e005      	b.n	80033c2 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80033b8:	613b      	str	r3, [r7, #16]
    break;
 80033ba:	e002      	b.n	80033c2 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	613b      	str	r3, [r7, #16]
    break;
 80033c0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	3301      	adds	r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033d0:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	fb02 f203 	mul.w	r2, r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	0e5b      	lsrs	r3, r3, #25
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	3301      	adds	r3, #1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003402:	683b      	ldr	r3, [r7, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40021000 	.word	0x40021000
 8003414:	08003f5c 	.word	0x08003f5c
 8003418:	00f42400 	.word	0x00f42400
 800341c:	007a1200 	.word	0x007a1200

08003420 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003428:	2300      	movs	r3, #0
 800342a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800342c:	2300      	movs	r3, #0
 800342e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003438:	2b00      	cmp	r3, #0
 800343a:	d040      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003440:	2b80      	cmp	r3, #128	; 0x80
 8003442:	d02a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003444:	2b80      	cmp	r3, #128	; 0x80
 8003446:	d825      	bhi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003448:	2b60      	cmp	r3, #96	; 0x60
 800344a:	d026      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800344c:	2b60      	cmp	r3, #96	; 0x60
 800344e:	d821      	bhi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d006      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003454:	2b40      	cmp	r3, #64	; 0x40
 8003456:	d81d      	bhi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d009      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800345c:	2b20      	cmp	r3, #32
 800345e:	d010      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003460:	e018      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003462:	4b89      	ldr	r3, [pc, #548]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	4a88      	ldr	r2, [pc, #544]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800346c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800346e:	e015      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	2100      	movs	r1, #0
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fb02 	bl	8003a80 <RCCEx_PLLSAI1_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003480:	e00c      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3320      	adds	r3, #32
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fbed 	bl	8003c68 <RCCEx_PLLSAI2_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003492:	e003      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	74fb      	strb	r3, [r7, #19]
      break;
 8003498:	e000      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800349a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034a2:	4b79      	ldr	r3, [pc, #484]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034a8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034b0:	4975      	ldr	r1, [pc, #468]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80034b8:	e001      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ba:	7cfb      	ldrb	r3, [r7, #19]
 80034bc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d047      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d2:	d030      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80034d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d8:	d82a      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80034da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034de:	d02a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80034e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e4:	d824      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80034e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ea:	d008      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xde>
 80034ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f0:	d81e      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80034f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fa:	d010      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034fc:	e018      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034fe:	4b62      	ldr	r3, [pc, #392]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	4a61      	ldr	r2, [pc, #388]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800350a:	e015      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fab4 	bl	8003a80 <RCCEx_PLLSAI1_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800351c:	e00c      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3320      	adds	r3, #32
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fb9f 	bl	8003c68 <RCCEx_PLLSAI2_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800352e:	e003      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	74fb      	strb	r3, [r7, #19]
      break;
 8003534:	e000      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800353e:	4b52      	ldr	r3, [pc, #328]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003540:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	494e      	ldr	r1, [pc, #312]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003554:	e001      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 809f 	beq.w	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003568:	2300      	movs	r3, #0
 800356a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800356c:	4b46      	ldr	r3, [pc, #280]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800357c:	2300      	movs	r3, #0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00d      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003586:	4a40      	ldr	r2, [pc, #256]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6593      	str	r3, [r2, #88]	; 0x58
 800358e:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a3a      	ldr	r2, [pc, #232]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035aa:	f7fd fbfd 	bl	8000da8 <HAL_GetTick>
 80035ae:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035b0:	e009      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fd fbf9 	bl	8000da8 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d902      	bls.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	74fb      	strb	r3, [r7, #19]
        break;
 80035c4:	e005      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c6:	4b31      	ldr	r3, [pc, #196]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0ef      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80035d2:	7cfb      	ldrb	r3, [r7, #19]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d15b      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01f      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d019      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003600:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	4a1f      	ldr	r2, [pc, #124]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800360a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003612:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003618:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003622:	4a19      	ldr	r2, [pc, #100]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d016      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd fbb8 	bl	8000da8 <HAL_GetTick>
 8003638:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363a:	e00b      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fd fbb4 	bl	8000da8 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d902      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	74fb      	strb	r3, [r7, #19]
            break;
 8003652:	e006      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ec      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10c      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003678:	4903      	ldr	r1, [pc, #12]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003680:	e008      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	74bb      	strb	r3, [r7, #18]
 8003686:	e005      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003694:	7c7b      	ldrb	r3, [r7, #17]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4ba0      	ldr	r3, [pc, #640]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	4a9f      	ldr	r2, [pc, #636]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036b2:	4b9a      	ldr	r3, [pc, #616]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f023 0203 	bic.w	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	4996      	ldr	r1, [pc, #600]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036d4:	4b91      	ldr	r3, [pc, #580]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f023 020c 	bic.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	498e      	ldr	r1, [pc, #568]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036f6:	4b89      	ldr	r3, [pc, #548]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003704:	4985      	ldr	r1, [pc, #532]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003718:	4b80      	ldr	r3, [pc, #512]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003726:	497d      	ldr	r1, [pc, #500]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800373a:	4b78      	ldr	r3, [pc, #480]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003748:	4974      	ldr	r1, [pc, #464]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800375c:	4b6f      	ldr	r3, [pc, #444]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003762:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	496c      	ldr	r1, [pc, #432]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800377e:	4b67      	ldr	r3, [pc, #412]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378c:	4963      	ldr	r1, [pc, #396]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037a0:	4b5e      	ldr	r3, [pc, #376]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037ae:	495b      	ldr	r1, [pc, #364]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037c2:	4b56      	ldr	r3, [pc, #344]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	4952      	ldr	r1, [pc, #328]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037e4:	4b4d      	ldr	r3, [pc, #308]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	494a      	ldr	r1, [pc, #296]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003806:	4b45      	ldr	r3, [pc, #276]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	4941      	ldr	r1, [pc, #260]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003828:	4b3c      	ldr	r3, [pc, #240]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800382a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003836:	4939      	ldr	r1, [pc, #228]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d028      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800384a:	4b34      	ldr	r3, [pc, #208]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800384c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003850:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003858:	4930      	ldr	r1, [pc, #192]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003864:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003868:	d106      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800386a:	4b2c      	ldr	r3, [pc, #176]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	4a2b      	ldr	r2, [pc, #172]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003874:	60d3      	str	r3, [r2, #12]
 8003876:	e011      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003880:	d10c      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	2101      	movs	r1, #1
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f8f9 	bl	8003a80 <RCCEx_PLLSAI1_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003892:	7cfb      	ldrb	r3, [r7, #19]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003898:	7cfb      	ldrb	r3, [r7, #19]
 800389a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d04d      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b0:	d108      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80038b2:	4b1a      	ldr	r3, [pc, #104]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80038c2:	e012      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80038c4:	4b15      	ldr	r3, [pc, #84]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ca:	4a14      	ldr	r2, [pc, #80]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038d0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e2:	490e      	ldr	r1, [pc, #56]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f2:	d106      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a08      	ldr	r2, [pc, #32]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038fe:	60d3      	str	r3, [r2, #12]
 8003900:	e020      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800390a:	d109      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800390c:	4b03      	ldr	r3, [pc, #12]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4a02      	ldr	r2, [pc, #8]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003916:	60d3      	str	r3, [r2, #12]
 8003918:	e014      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800391a:	bf00      	nop
 800391c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003928:	d10c      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	2101      	movs	r1, #1
 8003930:	4618      	mov	r0, r3
 8003932:	f000 f8a5 	bl	8003a80 <RCCEx_PLLSAI1_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d028      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003950:	4b4a      	ldr	r3, [pc, #296]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003956:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800395e:	4947      	ldr	r1, [pc, #284]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800396a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800396e:	d106      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003970:	4b42      	ldr	r3, [pc, #264]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4a41      	ldr	r2, [pc, #260]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800397a:	60d3      	str	r3, [r2, #12]
 800397c:	e011      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003982:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003986:	d10c      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	2101      	movs	r1, #1
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f876 	bl	8003a80 <RCCEx_PLLSAI1_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003998:	7cfb      	ldrb	r3, [r7, #19]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01e      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039ae:	4b33      	ldr	r3, [pc, #204]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039be:	492f      	ldr	r1, [pc, #188]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2102      	movs	r1, #2
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 f851 	bl	8003a80 <RCCEx_PLLSAI1_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039e2:	7cfb      	ldrb	r3, [r7, #19]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00b      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039f8:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039fe:	f023 0204 	bic.w	r2, r3, #4
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a08:	491c      	ldr	r1, [pc, #112]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a22:	f023 0218 	bic.w	r2, r3, #24
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2c:	4913      	ldr	r1, [pc, #76]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d017      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a50:	490a      	ldr	r1, [pc, #40]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a62:	d105      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a70:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000

08003a80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a8e:	4b72      	ldr	r3, [pc, #456]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00e      	beq.n	8003ab8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a9a:	4b6f      	ldr	r3, [pc, #444]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0203 	and.w	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d103      	bne.n	8003ab2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
       ||
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d142      	bne.n	8003b38 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	73fb      	strb	r3, [r7, #15]
 8003ab6:	e03f      	b.n	8003b38 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d018      	beq.n	8003af2 <RCCEx_PLLSAI1_Config+0x72>
 8003ac0:	2b03      	cmp	r3, #3
 8003ac2:	d825      	bhi.n	8003b10 <RCCEx_PLLSAI1_Config+0x90>
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d002      	beq.n	8003ace <RCCEx_PLLSAI1_Config+0x4e>
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d009      	beq.n	8003ae0 <RCCEx_PLLSAI1_Config+0x60>
 8003acc:	e020      	b.n	8003b10 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ace:	4b62      	ldr	r3, [pc, #392]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11d      	bne.n	8003b16 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ade:	e01a      	b.n	8003b16 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ae0:	4b5d      	ldr	r3, [pc, #372]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d116      	bne.n	8003b1a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af0:	e013      	b.n	8003b1a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003af2:	4b59      	ldr	r3, [pc, #356]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003afe:	4b56      	ldr	r3, [pc, #344]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b0e:	e006      	b.n	8003b1e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      break;
 8003b14:	e004      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b16:	bf00      	nop
 8003b18:	e002      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003b1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d108      	bne.n	8003b38 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003b26:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f023 0203 	bic.w	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4949      	ldr	r1, [pc, #292]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f040 8086 	bne.w	8003c4c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b40:	4b45      	ldr	r3, [pc, #276]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a44      	ldr	r2, [pc, #272]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4c:	f7fd f92c 	bl	8000da8 <HAL_GetTick>
 8003b50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b52:	e009      	b.n	8003b68 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b54:	f7fd f928 	bl	8000da8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d902      	bls.n	8003b68 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	73fb      	strb	r3, [r7, #15]
        break;
 8003b66:	e005      	b.n	8003b74 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b68:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ef      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d168      	bne.n	8003c4c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d113      	bne.n	8003ba8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b80:	4b35      	ldr	r3, [pc, #212]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	4b35      	ldr	r3, [pc, #212]	; (8003c5c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6892      	ldr	r2, [r2, #8]
 8003b8c:	0211      	lsls	r1, r2, #8
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	06d2      	lsls	r2, r2, #27
 8003b94:	4311      	orrs	r1, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6852      	ldr	r2, [r2, #4]
 8003b9a:	3a01      	subs	r2, #1
 8003b9c:	0112      	lsls	r2, r2, #4
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	492d      	ldr	r1, [pc, #180]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	610b      	str	r3, [r1, #16]
 8003ba6:	e02d      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d115      	bne.n	8003bda <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bae:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	4b2b      	ldr	r3, [pc, #172]	; (8003c60 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6892      	ldr	r2, [r2, #8]
 8003bba:	0211      	lsls	r1, r2, #8
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6912      	ldr	r2, [r2, #16]
 8003bc0:	0852      	lsrs	r2, r2, #1
 8003bc2:	3a01      	subs	r2, #1
 8003bc4:	0552      	lsls	r2, r2, #21
 8003bc6:	4311      	orrs	r1, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6852      	ldr	r2, [r2, #4]
 8003bcc:	3a01      	subs	r2, #1
 8003bce:	0112      	lsls	r2, r2, #4
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	4921      	ldr	r1, [pc, #132]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	610b      	str	r3, [r1, #16]
 8003bd8:	e014      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bda:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	4b21      	ldr	r3, [pc, #132]	; (8003c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6892      	ldr	r2, [r2, #8]
 8003be6:	0211      	lsls	r1, r2, #8
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6952      	ldr	r2, [r2, #20]
 8003bec:	0852      	lsrs	r2, r2, #1
 8003bee:	3a01      	subs	r2, #1
 8003bf0:	0652      	lsls	r2, r2, #25
 8003bf2:	4311      	orrs	r1, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6852      	ldr	r2, [r2, #4]
 8003bf8:	3a01      	subs	r2, #1
 8003bfa:	0112      	lsls	r2, r2, #4
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	4916      	ldr	r1, [pc, #88]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fd f8ca 	bl	8000da8 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c16:	e009      	b.n	8003c2c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c18:	f7fd f8c6 	bl	8000da8 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d902      	bls.n	8003c2c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	73fb      	strb	r3, [r7, #15]
          break;
 8003c2a:	e005      	b.n	8003c38 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ef      	beq.n	8003c18 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c40:	691a      	ldr	r2, [r3, #16]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	4904      	ldr	r1, [pc, #16]	; (8003c58 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	07ff800f 	.word	0x07ff800f
 8003c60:	ff9f800f 	.word	0xff9f800f
 8003c64:	f9ff800f 	.word	0xf9ff800f

08003c68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c76:	4b72      	ldr	r3, [pc, #456]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00e      	beq.n	8003ca0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c82:	4b6f      	ldr	r3, [pc, #444]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0203 	and.w	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d103      	bne.n	8003c9a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
       ||
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d142      	bne.n	8003d20 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	e03f      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d018      	beq.n	8003cda <RCCEx_PLLSAI2_Config+0x72>
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d825      	bhi.n	8003cf8 <RCCEx_PLLSAI2_Config+0x90>
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d002      	beq.n	8003cb6 <RCCEx_PLLSAI2_Config+0x4e>
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d009      	beq.n	8003cc8 <RCCEx_PLLSAI2_Config+0x60>
 8003cb4:	e020      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cb6:	4b62      	ldr	r3, [pc, #392]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d11d      	bne.n	8003cfe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc6:	e01a      	b.n	8003cfe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cc8:	4b5d      	ldr	r3, [pc, #372]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d116      	bne.n	8003d02 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd8:	e013      	b.n	8003d02 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cda:	4b59      	ldr	r3, [pc, #356]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10f      	bne.n	8003d06 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ce6:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cf6:	e006      	b.n	8003d06 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cfc:	e004      	b.n	8003d08 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e002      	b.n	8003d08 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003d06:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d108      	bne.n	8003d20 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003d0e:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f023 0203 	bic.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4949      	ldr	r1, [pc, #292]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f040 8086 	bne.w	8003e34 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d28:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a44      	ldr	r2, [pc, #272]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d34:	f7fd f838 	bl	8000da8 <HAL_GetTick>
 8003d38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d3a:	e009      	b.n	8003d50 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d3c:	f7fd f834 	bl	8000da8 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d902      	bls.n	8003d50 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d4e:	e005      	b.n	8003d5c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d50:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1ef      	bne.n	8003d3c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d168      	bne.n	8003e34 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d113      	bne.n	8003d90 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d68:	4b35      	ldr	r3, [pc, #212]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	4b35      	ldr	r3, [pc, #212]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6892      	ldr	r2, [r2, #8]
 8003d74:	0211      	lsls	r1, r2, #8
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68d2      	ldr	r2, [r2, #12]
 8003d7a:	06d2      	lsls	r2, r2, #27
 8003d7c:	4311      	orrs	r1, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6852      	ldr	r2, [r2, #4]
 8003d82:	3a01      	subs	r2, #1
 8003d84:	0112      	lsls	r2, r2, #4
 8003d86:	430a      	orrs	r2, r1
 8003d88:	492d      	ldr	r1, [pc, #180]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	614b      	str	r3, [r1, #20]
 8003d8e:	e02d      	b.n	8003dec <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d115      	bne.n	8003dc2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6892      	ldr	r2, [r2, #8]
 8003da2:	0211      	lsls	r1, r2, #8
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6912      	ldr	r2, [r2, #16]
 8003da8:	0852      	lsrs	r2, r2, #1
 8003daa:	3a01      	subs	r2, #1
 8003dac:	0552      	lsls	r2, r2, #21
 8003dae:	4311      	orrs	r1, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6852      	ldr	r2, [r2, #4]
 8003db4:	3a01      	subs	r2, #1
 8003db6:	0112      	lsls	r2, r2, #4
 8003db8:	430a      	orrs	r2, r1
 8003dba:	4921      	ldr	r1, [pc, #132]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	614b      	str	r3, [r1, #20]
 8003dc0:	e014      	b.n	8003dec <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dc2:	4b1f      	ldr	r3, [pc, #124]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	4b21      	ldr	r3, [pc, #132]	; (8003e4c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6892      	ldr	r2, [r2, #8]
 8003dce:	0211      	lsls	r1, r2, #8
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6952      	ldr	r2, [r2, #20]
 8003dd4:	0852      	lsrs	r2, r2, #1
 8003dd6:	3a01      	subs	r2, #1
 8003dd8:	0652      	lsls	r2, r2, #25
 8003dda:	4311      	orrs	r1, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6852      	ldr	r2, [r2, #4]
 8003de0:	3a01      	subs	r2, #1
 8003de2:	0112      	lsls	r2, r2, #4
 8003de4:	430a      	orrs	r2, r1
 8003de6:	4916      	ldr	r1, [pc, #88]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003dec:	4b14      	ldr	r3, [pc, #80]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df8:	f7fc ffd6 	bl	8000da8 <HAL_GetTick>
 8003dfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dfe:	e009      	b.n	8003e14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e00:	f7fc ffd2 	bl	8000da8 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d902      	bls.n	8003e14 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	73fb      	strb	r3, [r7, #15]
          break;
 8003e12:	e005      	b.n	8003e20 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0ef      	beq.n	8003e00 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	4904      	ldr	r1, [pc, #16]	; (8003e40 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	07ff800f 	.word	0x07ff800f
 8003e48:	ff9f800f 	.word	0xff9f800f
 8003e4c:	f9ff800f 	.word	0xf9ff800f

08003e50 <arm_sin_f32>:
 8003e50:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003ed0 <arm_sin_f32+0x80>
 8003e54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003e58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e60:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003e64:	d504      	bpl.n	8003e70 <arm_sin_f32+0x20>
 8003e66:	ee17 3a90 	vmov	r3, s15
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e74:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003ed4 <arm_sin_f32+0x84>
 8003e78:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003e7c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003e80:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8003e84:	ee17 3a90 	vmov	r3, s15
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8e:	d21a      	bcs.n	8003ec6 <arm_sin_f32+0x76>
 8003e90:	ee07 3a90 	vmov	s15, r3
 8003e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e98:	1c59      	adds	r1, r3, #1
 8003e9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003e9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <arm_sin_f32+0x88>)
 8003ea0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003ea4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003ea8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003eac:	ed93 7a00 	vldr	s14, [r3]
 8003eb0:	edd2 6a00 	vldr	s13, [r2]
 8003eb4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003eb8:	ee20 0a26 	vmul.f32	s0, s0, s13
 8003ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ec0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003ec4:	4770      	bx	lr
 8003ec6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003eca:	2101      	movs	r1, #1
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e7e6      	b.n	8003e9e <arm_sin_f32+0x4e>
 8003ed0:	3e22f983 	.word	0x3e22f983
 8003ed4:	44000000 	.word	0x44000000
 8003ed8:	08003f8c 	.word	0x08003f8c

08003edc <__libc_init_array>:
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	4d0d      	ldr	r5, [pc, #52]	; (8003f14 <__libc_init_array+0x38>)
 8003ee0:	4c0d      	ldr	r4, [pc, #52]	; (8003f18 <__libc_init_array+0x3c>)
 8003ee2:	1b64      	subs	r4, r4, r5
 8003ee4:	10a4      	asrs	r4, r4, #2
 8003ee6:	2600      	movs	r6, #0
 8003ee8:	42a6      	cmp	r6, r4
 8003eea:	d109      	bne.n	8003f00 <__libc_init_array+0x24>
 8003eec:	4d0b      	ldr	r5, [pc, #44]	; (8003f1c <__libc_init_array+0x40>)
 8003eee:	4c0c      	ldr	r4, [pc, #48]	; (8003f20 <__libc_init_array+0x44>)
 8003ef0:	f000 f820 	bl	8003f34 <_init>
 8003ef4:	1b64      	subs	r4, r4, r5
 8003ef6:	10a4      	asrs	r4, r4, #2
 8003ef8:	2600      	movs	r6, #0
 8003efa:	42a6      	cmp	r6, r4
 8003efc:	d105      	bne.n	8003f0a <__libc_init_array+0x2e>
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
 8003f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f04:	4798      	blx	r3
 8003f06:	3601      	adds	r6, #1
 8003f08:	e7ee      	b.n	8003ee8 <__libc_init_array+0xc>
 8003f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f0e:	4798      	blx	r3
 8003f10:	3601      	adds	r6, #1
 8003f12:	e7f2      	b.n	8003efa <__libc_init_array+0x1e>
 8003f14:	08004790 	.word	0x08004790
 8003f18:	08004790 	.word	0x08004790
 8003f1c:	08004790 	.word	0x08004790
 8003f20:	08004794 	.word	0x08004794

08003f24 <memset>:
 8003f24:	4402      	add	r2, r0
 8003f26:	4603      	mov	r3, r0
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d100      	bne.n	8003f2e <memset+0xa>
 8003f2c:	4770      	bx	lr
 8003f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f32:	e7f9      	b.n	8003f28 <memset+0x4>

08003f34 <_init>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	bf00      	nop
 8003f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3a:	bc08      	pop	{r3}
 8003f3c:	469e      	mov	lr, r3
 8003f3e:	4770      	bx	lr

08003f40 <_fini>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	bf00      	nop
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr
